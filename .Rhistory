# NonInvItems, NonInvG, NonInvType)
colnames(design) <- c("nclus", "ngroups", "coeff", "N_g", "balance", "sd", "model")
# "reliability", "NonInvSize", "ResRange", "NonInvItems", "NonInvG", "NonInvType")
rownames(design) <- NULL
rm(balance, coeff, N_g, nclus, ngroups, sd) #, NonInvG, NonInvItems, NonInvSize, reliability, ResRange)
# Remove unnecessary rows
design <- design[design$ngroups == 24, ]
design$R2 <- unlist(lapply(X = R2, FUN = mean))
summary(unlist(lapply(X = R2, FUN = mean)))
View(R2)
View(design)
log(500)
log(0)
log(1)
log(0.06)
log(1)
log(0.000000000000005)
load("~/GitHub/ModelSelection_Simulation/Entropy/popR2.Rdata")
design$R2 <- unlist(lapply(X = R2, FUN = mean))
library(lavaan)
library(dplyr)
# Simulation Design
# Which factors are going to be tested? For now:
nclus   <- c(2, 4)         # Number of clusters
ngroups <- c(24, 48)       # Number of groups
coeff   <- c(0.3, 0.4)     # Initial regression parameters
N_g     <- c(50, 100, 200) # Sample size per groups
balance <- c("bal", "unb") # Cluster size
sd      <- c(0, 0.05, 0.1) # Differences within a cluster (in betas)
# reliability <- c("low")
# NonInvSize <- c(0.6)
# ResRange <- 0.2
# NonInvItems <- 2
# NonInvG <- c(0.50)
# NonInvType <- c("fixed")
model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
S1 <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
'
S2 <- '
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
# Get design matrix
design <- expand.grid(nclus, ngroups, coeff, N_g, balance, sd, model) # , reliability, NonInvSize, ResRange,
# NonInvItems, NonInvG, NonInvType)
colnames(design) <- c("nclus", "ngroups", "coeff", "N_g", "balance", "sd", "model")
# "reliability", "NonInvSize", "ResRange", "NonInvItems", "NonInvG", "NonInvType")
rownames(design) <- NULL
rm(balance, coeff, N_g, nclus, ngroups, sd) #, NonInvG, NonInvItems, NonInvSize, reliability, ResRange)
# Remove unnecessary rows
design <- design[design$ngroups == 24, ]
# Rename rownames
rownames(design) <- seq_len(nrow(design))
design$R2 <- unlist(lapply(X = R2, FUN = mean))
design %>% group_by(nclus)   %>% summarise(across(R2, mean))
design %>% group_by(sd)      %>% summarise(across(R2, mean))
design %>% group_by(N_g)     %>% summarise(across(R2, mean))
design %>% group_by(nclus)   %>% summarise(across(R2, mean))
design %>% group_by(coeff)   %>% summarise(across(R2, mean))
design %>% group_by(balance) %>% summarise(across(R2, mean))
design %>% group_by(sd, coeff) %>% summarise(across(R2, mean))
load("~/GitHub/ModelSelection_Simulation/Entropy/popR2.Rdata")
design$R2 <- unlist(lapply(X = R2, FUN = mean))
library(lavaan)
library(dplyr)
# Simulation Design
# Which factors are going to be tested? For now:
nclus   <- c(2, 4)         # Number of clusters
ngroups <- c(24, 48)       # Number of groups
coeff   <- c(0.3, 0.4)     # Initial regression parameters
N_g     <- c(50, 100, 200) # Sample size per groups
balance <- c("bal", "unb") # Cluster size
sd      <- c(0, 0.05, 0.1) # Differences within a cluster (in betas)
# reliability <- c("low")
# NonInvSize <- c(0.6)
# ResRange <- 0.2
# NonInvItems <- 2
# NonInvG <- c(0.50)
# NonInvType <- c("fixed")
model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
S1 <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
'
S2 <- '
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
# Get design matrix
design <- expand.grid(nclus, ngroups, coeff, N_g, balance, sd, model) # , reliability, NonInvSize, ResRange,
# NonInvItems, NonInvG, NonInvType)
colnames(design) <- c("nclus", "ngroups", "coeff", "N_g", "balance", "sd", "model")
# "reliability", "NonInvSize", "ResRange", "NonInvItems", "NonInvG", "NonInvType")
rownames(design) <- NULL
rm(balance, coeff, N_g, nclus, ngroups, sd) #, NonInvG, NonInvItems, NonInvSize, reliability, ResRange)
# Remove unnecessary rows
design <- design[design$ngroups == 24, ]
# Rename rownames
rownames(design) <- seq_len(nrow(design))
design$R2 <- unlist(lapply(X = R2, FUN = mean))
design %>% group_by(nclus)   %>% summarise(across(R2, mean))
design %>% group_by(sd)      %>% summarise(across(R2, mean))
design %>% group_by(N_g)     %>% summarise(across(R2, mean))
design %>% group_by(nclus)   %>% summarise(across(R2, mean))
design %>% group_by(coeff)   %>% summarise(across(R2, mean))
design %>% group_by(balance) %>% summarise(across(R2, mean))
design %>% group_by(sd, coeff) %>% summarise(across(R2, mean))
summary(unlist(lapply(X = R2, FUN = mean)))
res_nclus   <- design %>% group_by(nclus)   %>% summarise(across(R2, mean))
res_sd      <- design %>% group_by(sd)      %>% summarise(across(R2, mean))
res_N_g     <- design %>% group_by(N_g)     %>% summarise(across(R2, mean))
res_nclus   <- design %>% group_by(nclus)   %>% summarise(across(R2, mean))
res_coeff   <- design %>% group_by(coeff)   %>% summarise(across(R2, mean))
res_balance <- design %>% group_by(balance) %>% summarise(across(R2, mean))
res_nclus
res_sd
design %>% group_by(nclus)   %>% summarise(across(R2, mean)) %>% rownames() <- colnames()[1]
design %>% group_by(nclus)   %>% summarise(across(R2, mean)) %>% rownames(.) <- colnames(.)[1]
library(fpp3)
design %>% group_by(nclus)   %>% summarise(across(R2, mean)) %>% add_column(Factor = "nclus", .before = "nclus")
res_nclus   <- design %>% group_by(nclus)   %>% summarise(across(R2, mean)) %>% add_column(Factor = "nclus", .before = "nclus") %>% rename("Level" = "nclus")
res_nclus
res_nclus   <- design %>% group_by(nclus)   %>% summarise(across(R2, mean)) %>% add_column(Factor = "nclus", .before = "nclus") %>% rename("Level" = "nclus")
res_sd      <- design %>% group_by(sd)      %>% summarise(across(R2, mean)) %>% add_column(Factor = "sd", .before = "sd") %>% rename("Level" = "sd")
res_N_g     <- design %>% group_by(N_g)     %>% summarise(across(R2, mean)) %>% add_column(Factor = "N_g", .before = "N_g") %>% rename("Level" = "N_g")
res_coeff   <- design %>% group_by(coeff)   %>% summarise(across(R2, mean)) %>% add_column(Factor = "coeff", .before = "coeff") %>% rename("Level" = "coeff")
res_balance <- design %>% group_by(balance) %>% summarise(across(R2, mean)) %>% add_column(Factor = "balance", .before = "balance") %>% rename("Level" = "balance")
res_nclus
res_r2 <- rbind(res_N_g, res_sd, res_coeff)
res_r2
rbind(res_N_g, res_sd, res_coeff) %>% pivot_wider(., names_from = "Level")
res_r2 <- rbind(res_N_g, res_sd, res_coeff) %>% select(Level, R2) %>% pivot_wider(., names_from = "Level")
res_r2 <- rbind(res_N_g, res_sd, res_coeff) %>% select(Level, R2) %>% pivot_wider(., names_from = "Level", values_from = "R2")
res_r2
library(ggplot2)
rbind(res_N_g, res_sd, res_coeff) %>% select(Level, R2)
rbind(res_N_g, res_sd, res_coeff)
# Plot
res_r2_long <- rbind(res_N_g, res_sd, res_coeff)
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) + geom_line()
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) + geom_point()
# Plot
res_r2_long <- design %>% group_by(sd, coeff) %>% summarise(across(R2, mean))
res_r2_long
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) + geom_point()
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) + facet_wrap(~coeff) + geom_point()
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) + facet_wrap(~coeff) + geom_point() + geom_line()
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy")
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point() +
geom_line(size = 1)
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point() +
geom_line(linewidth = 1)
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point() +
geom_line(linewidth = 0.5)
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point(color = "green") +
geom_line(linewidth = 0.5, color = "green")
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point(color = "green4") +
geom_line(linewidth = 0.5, color = "green4")
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point(color = "green4") +
geom_line(linewidth = 0.5, color = "green4") +
scale_x_continuous(labels=scaleFUN)
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point(color = "green4") +
geom_line(linewidth = 0.5, color = "green4") +
scale_x_continuous(labels= "0", "0.05", "0.1")
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point(color = "green4") +
geom_line(linewidth = 0.5, color = "green4") +
scale_x_continuous(labels = c("0", "0.05", "0.1"))
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point(color = "green4") +
geom_line(linewidth = 0.5, color = "green4") +
scale_x_continuous(labels = c("0", "0.05", "0.1", "0", "0.05", "0.1"))
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point(color = "green4") +
geom_line(linewidth = 0.5, color = "green4") + scale_x_continuous(labels = waiver("0", "0.05", "0.1"))
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point(color = "green4") +
geom_line(linewidth = 0.5, color = "green4") + scale_x_continuous(labels = function(x) format(x, nsmall = 2))
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point(color = "green4") +
geom_line(linewidth = 0.5, color = "green4") + scale_x_continuous(labels = function(x) format(x, nsmall = 1))
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point(color = "green4") +
geom_line(linewidth = 0.5, color = "green4") + scale_x_continuous(labels = function(x) format(x, nsmall = 0))
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point(color = "green4") +
geom_line(linewidth = 0.5, color = "green4") + scale_x_continuous(labels = function(x) format(x, nsmall = 0L))
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point(color = "green4") +
geom_line(linewidth = 0.5, color = "green4") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Size of Regression Parameter", breaks = NULL, labels = function(x) format(x, nsmall = 0L)))
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point(color = "green4") +
geom_line(linewidth = 0.5, color = "green4") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Size of Regression Parameter", breaks = NULL, labels = NULL))
library(scales)
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point(color = "green4") +
geom_line(linewidth = 0.5, color = "green4") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Size of Regression Parameter", breaks = NULL, labels = scales::label_number(scale = 1, accuracy = 0.01)))
ggplot(data = res_r2_long, mapping = aes(x = sd, y = R2)) +
facet_wrap(~coeff) + labs(x = "Within-cluster Differences", y = "R2 Entropy") +
geom_point(color = "green4") +
geom_line(linewidth = 0.5, color = "green4") +
scale_x_continuous(labels = scales::label_number(scale = 1, accuracy = 0.01),
sec.axis = sec_axis(~ . , name = "Size of Regression Parameter", breaks = NULL, labels = NULL))
2*0 + (-1)*0 + (-1*1) + (0*-1) + 0*0 + 0*0
(2*0) + (-1*0) + (-1*1) + (0*-1) + 0*0 + 0*0
library(haven)
Data <- read_sav("C:/Users/User/OneDrive - Tilburg University/Teaching/2024/SPSS Exam/22-23 Data.sav")
View(Data)
library(fpp3)
glimpse(Data)
summary(Data)
apply(X = Data[,-1], MARGIN = 2, FUN = unique)
# Re-sample
New <- Data
n <- nrow(New)
sample(x = unique(Data$age), size = n, replace = F)
# Age
New$age <- sample(x = unique(Data$age), size = n, replace = T)
# Sex
New$sex <- sample(x = c(1, 2), size = n, replace = T)
glimpse(Data)
# Education
New$education <- sample(x = c(1:4), size = n, replace = T)
# Living situation
New$Living_situation <- sample(x = c(1:3), size = n, replace = T)
# Married
New$married <- sample(x = c(1:2), size = n, replace = T)
# nr_children
New$nr_children <- sample(x = c(0:3), size = n, replace = T)
# smoking
New$smoking <- sample(x = c(1:2), size = n, replace = T)
# current job
New$current_job <- sample(x = c(1:3), size = n, replace = T)
# general_satis
New$general_satis <- sample(x = c(1:5), size = n, replace = T)
# relation_satis
New$relation_satis <- sample(x = c(1:5), size = n, replace = T)
unique(Data$tired)
unique(Data$tired)[which(!is.na(unique(Data$tired)))]
# tired
New$tired <- sample(x = unique(Data$tired)[which(!is.na(unique(Data$tired)))], size = n, replace = T)
# ill
New$ill <- sample(x = unique(Data$ill), size = n, replace = T)
# depressed
New$depressed <- sample(x = unique(Data$depressed)[which(!is.na(unique(Data$depressed)))], size = n, replace = T)
# Compare
summary(Data)
summary(New)
t.test(x = Data$tired[Data$sex == 1], y = Data$tired[Data$sex == 2])
t.test(x = Data$tired[Data$sex == 1], y = Data$tired[Data$sex == 2], var.equal = T)
t.test(x = Data$tired[New$sex == 1], y = Data$tired[New$sex == 2], var.equal = T)
# Re-sample
New <- Data
n <- nrow(New)
# Age
New$age <- sample(x = unique(Data$age), size = n, replace = T)
proportions(Data$sex)
prop(Data$sex)
prop.table(Data$sex)
(Data$sex)
table(Data$sex)
prop.table(table(Data$sex))
# Sex
New$sex <- sample(x = c(1, 2), size = n, replace = T, prob = prop.table(table(Data$sex)))
# Age
New$age <- sample(x = unique(Data$age), size = n, replace = T)
prop.table(table(Data$education))
# Education
New$education <- sample(x = c(1:4), size = n, replace = T, prob = prop.table(table(Data$education)))
# Living situation
New$Living_situation <- sample(x = c(1:3), size = n, replace = T, prop.table(table(Data$Living_situation)))
# Married
New$married <- sample(x = c(1:2), size = n, replace = T, prop.table(table(Data$married)))
prop.table(table(Data$nr_children))
# nr_children
New$nr_children <- sample(x = c(0, 2, 3), size = n, replace = T, prop.table(table(Data$nr_children)))
prop.table(table(Data$smoking))
# smoking
New$smoking <- sample(x = c(1:2), size = n, replace = T, prob = prop.table(table(Data$smoking)))
prop.table(table(Data$current_job))
# current job
New$current_job <- sample(x = c(1:3), size = n, replace = T, prob = prop.table(table(Data$current_job)))
prop.table(table(Data$general_satis))
# general_satis
New$general_satis <- sample(x = c(1:5), size = n, replace = T, prob = prop.table(table(Data$general_satis)))
prop.table(table(Data$relation_satis))
# relation_satis
New$relation_satis <- sample(x = c(1:5), size = n, replace = T, prob = prop.table(table(Data$relation_satis)))
prop.table(table(Data$TIRED))
prop.table(table(Data$tired))
unique(Data$tired)[which(!is.na(unique(Data$tired)))]
sort(unique(Data$tired)[which(!is.na(unique(Data$tired)))])
sort(unique(Data$tired)[which(!is.na(unique(Data$ill)))])
prop.table(table(Data$ill))
# ill
New$ill <- sample(x = sort(unique(Data$ill)), size = n, replace = T, prop.table(table(Data$ill)))
prop.table(table(Data$depressed))
# depressed
New$depressed <- sample(x = sort(unique(Data$depressed)[which(!is.na(unique(Data$depressed)))]), size = n, replace = T, prob = prop.table(table(Data$depressed)))
############ REPEAT ANALYSIS
t.test(x = New$tired[New$sex == 1], y = New$tired[New$sex == 2])
library(haven)
library(fpp3)
Data <- read_sav("C:/Users/User/OneDrive - Tilburg University/Teaching/2024/SPSS Exam/22-23 Data.sav")
summary(Data)
apply(X = Data[,-1], MARGIN = 2, FUN = unique)
# Re-sample
New <- Data
n <- nrow(New)
# Age
New$age <- sample(x = unique(Data$age), size = n, replace = T)
# Sex - Change sex of 1/4 of the participants (add some randomness)
id <- sample(x = 1:n, size = n/4, replace = F)
# Sex - Change sex of 1/5 of the participants (add some randomness)
id <- sample(x = 1:n, size = n/5, replace = F)
New$sex[id]
ifelse(Data$sex[id] == 1, 2, 1)
New$sex[id] <- ifelse(Data$sex[id] == 1, 2, 1)
############ REPEAT ANALYSIS
t.test(x = New$tired[New$sex == 1], y = New$tired[New$sex == 2])
############ REPEAT ANALYSIS
t.test(x = New$tired[New$sex == 1], y = New$tired[New$sex == 2], var.equal = T)
library(haven)
library(fpp3)
Data <- read_sav("C:/Users/User/OneDrive - Tilburg University/Teaching/2024/SPSS Exam/22-23 Data.sav")
summary(Data)
apply(X = Data[,-1], MARGIN = 2, FUN = unique)
# Re-sample
New <- Data
n <- nrow(New)
# Age - Re-sample age for all participants
New$age <- sample(x = unique(Data$age), size = n, replace = T)
# Sex - Change sex of 1/5 of the participants (add some randomness)
id <- sample(x = 1:n, size = n/5, replace = F)
New$sex[id] <- ifelse(Data$sex[id] == 1, 2, 1)
# Education
New$education <- sample(x = c(1:4), size = n, replace = T, prob = prop.table(table(Data$education)))
# Living situation
id <- sample(x = 1:n, size = n/7, replace = F)
Data$Living_situation[id]
ifelse(Data$Living_situation[id] == 1, 3, ifelse(Data$Living_situation[id] == 3, 2, 1))
library(haven)
library(fpp3)
Data <- read_sav("C:/Users/User/OneDrive - Tilburg University/Teaching/2024/SPSS Exam/22-23 Data.sav")
summary(Data)
apply(X = Data[,-1], MARGIN = 2, FUN = unique)
# Re-sample
New <- Data
n <- nrow(New)
# Age - Re-sample age for all participants
New$age <- sample(x = unique(Data$age), size = n, replace = T)
# Sex - Change sex of 1/5 of the participants (add some randomness)
id <- sample(x = 1:n, size = n/5, replace = F)
New$sex[id] <- ifelse(Data$sex[id] == 1, 2, 1)
# Education
New$education <- sample(x = c(1:4), size = n, replace = T, prob = prop.table(table(Data$education)))
# Living situation
id <- sample(x = 1:n, size = n/7, replace = F)
New$Living_situation[id] <- ifelse(Data$Living_situation[id] == 1, 3, ifelse(Data$Living_situation[id] == 3, 2, 1))
# Married
New$married <- sample(x = c(1:2), size = n, replace = T, prob = prop.table(table(Data$married)))
# nr_children
New$nr_children <- sample(x = c(0, 2, 3), size = n, replace = T, prob = prop.table(table(Data$nr_children)))
# smoking
New$smoking <- sample(x = c(1:2), size = n, replace = T, prob = prop.table(table(Data$smoking)))
# current job
New$current_job <- sample(x = c(1:3), size = n, replace = T, prob = prop.table(table(Data$current_job)))
log(48)
log(24)
log(24+1)
log(12+1)
library(lavaan)
setwd("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Functions")
source("MMG-SEM.R")
source("E_Step.R")
source("ModelSelection.R")
setwd("C:/Users/User/Documents/GitHub/ModelSelection_Simulation\")
)
q
))
apply()
\\
\""
setwd("~/GitHub/ModelSelection_Simulation")
setwd("C:/Users/User/Documents/GitHub/ModelSelection_Simulation")
source("DataGeneration.R")
nclus   <- c(2, 4)         # Number of clusters
ngroups <- c(24, 48)       # Number of groups
coeff   <- c(0.3, 0.4)     # Initial regression parameters
N_g     <- c(50, 100, 200) # Sample size per groups
balance <- c("bal", "unb") # Cluster size
sd      <- c(0, 0.05, 0.1) # Differences within a cluster (in betas)
# reliability <- c("low")
# NonInvSize <- c(0.6)
# ResRange <- 0.2
# NonInvItems <- 2
# NonInvG <- c(0.50)
# NonInvType <- c("fixed")
model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
S1 <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
'
S2 <- '
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
# Get design matrix
design <- expand.grid(nclus, ngroups, coeff, N_g, balance, sd, model) # , reliability, NonInvSize, ResRange,
# NonInvItems, NonInvG, NonInvType)
colnames(design) <- c("nclus", "ngroups", "coeff", "N_g", "balance", "sd", "model")
# "reliability", "NonInvSize", "ResRange", "NonInvItems", "NonInvG", "NonInvType")
rownames(design) <- NULL
rm(balance, coeff, N_g, nclus, ngroups, sd) #, NonInvG, NonInvItems, NonInvSize, reliability, ResRange)
SimData <- DataGeneration(model     = design[17, "model"],
nclus     = design[17, "nclus"],
ngroups   = design[17, "ngroups"],
reg_coeff = design[17, "coeff"],
N_g       = design[17, "N_g"],
balance   = design[17, "balance"],
sd        = design[17, "sd"])
set.seed(17)
SimData <- DataGeneration(model     = design[17, "model"],
nclus     = design[17, "nclus"],
ngroups   = design[17, "ngroups"],
reg_coeff = design[17, "coeff"],
N_g       = design[17, "N_g"],
balance   = design[17, "balance"],
sd        = design[17, "sd"])
b <- MMGSEM(dat = SimData$SimData, step1model = S1, step2model = S2,
group = "group", nstarts = 25, seed = 17, nclus = 24,
constraints = "loadings", allG = T, fit = "factors", NonInv = NonInv)
NonInv <- c("F1 =~ x2", "F1 =~ x3",
"F2 =~ z2", "F2 =~ z3",
"F3 =~ m2", "F3 =~ m3",
"F4 =~ y2", "F4 =~ y3")
a <- ModelSelection(dat = SimData$SimData, step1model = S1, step2model = S2,
group = "group", clusters = c(1, 6), nstarts = 25, seed = 17,
constraints = "loadings", allG = T, fit = "factors", NonInv = NonInv)
c <- lavaan::sem(model = model, data = SimData$SimData, group = "group", group.equal = "loadings", group.partial = NonInv)
b <- MMGSEM(dat = SimData$SimData, step1model = S1, step2model = S2,
group = "group", nstarts = 25, seed = 17, nclus = 24,
constraints = "loadings", allG = T, fit = "factors", NonInv = NonInv)
