fit <- sem(HS.model, data=data, ordered = T)
summary(fit, fit.measures=TRUE)
load("C:/Users/perezalo/Documents/GitHub/ModelSelection_Simulation/Pre-Review/Results/Result_IgnRowARI8.Rdata")
View(ResultsRowARI_ignored)
load("C:/Users/perezalo/Documents/GitHub/ModelSelection_Simulation/Pre-Review/Results/ResultRow140.Rdata")
View(ResultsRow)
library(lavaan)
library(qwraps2)
library(fpp3)
library(dplyr)
library(xtable)
library(ggpubr)
library(ggplot2)
library(ggthemes)
setwd("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1")
# Set wd
setwd("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1")
# Load empty final results matrix
load("FinalResults.Rdata")
setwd("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1")
setwd("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Results")
# Simulation Design
# Which factors are going to be tested? For now:
nclus   <- 1               # Number of clusters
ngroups <- c(24, 48)       # Number of groups
coeff   <- 0.4             # Initial regression parameters
N_g     <- c(50, 100, 200) # Sample size per groups
balance <- c("bal")        # Cluster size
sd      <- c(0, 0.05, 0.1) # Differences within a cluster (in betas)
model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
S1 <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
'
S2 <- '
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
# Get design matrix
design <- expand.grid(nclus, ngroups, coeff, N_g, balance, sd, model)
colnames(design) <- c("nclus", "ngroups", "coeff", "N_g", "balance", "sd", "model")
rownames(design) <- NULL
rm(balance, coeff, N_g, nclus, sd, ngroups)
# Set number of replications per condition
K <- 100
# Save empty full matrix
Results_final <- as.data.frame(matrix(data = NA, nrow = nrow(design)*K, ncol = 13))
Results_final$Replication <- rep(x = 1:K, times = nrow(design))
Results_final$Condition <- rep(x = 1:nrow(design), each = K)
save(Results_final, file = "FinalResults.Rdata")
save(design, file = "design.Rdata")
# Set wd
setwd("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1")
# Load empty final results matrix
load("FinalResults.Rdata")
colnames(Results_final)[1:13] <- c("entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
# Set wd
setwd("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1")
# Set wd
setwd("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Results")
# Load empty final results matrix
load("FinalResults.Rdata")
colnames(Results_final)[1:13] <- c("entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
load("design.Rdata")
# Merge datasets
design$Condition <- as.numeric(rownames(design))
Results_final <- merge(x = design, y = Results_final, by = "Condition")
col_order <- c("Condition", "Replication", "nclus", "ngroups", "coeff", "N_g", "balance", "sd",
"entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
Results_final <- Results_final[, col_order]
rm(col_order)
# Fill in the matrix with all results
ncond <- unique(Results_final$Condition) # How many conditions?
K <- length(unique(Results_final$Replication)) # How many replications?
for (i in ncond) {
test <- NA
test <- try(load(paste0("ResultRow", i, ".Rdata")))
if(!c(class(test) == "try-error")){
Results_final[(K*(i-1)+1):(i*K), 9:21] <- ResultsRow
}
}
View(ResultsRow)
# REMEMBER THAT THE RESULTS MUST TYPE "FACTOR"
measures <- Results_final %>% dplyr::select(Chull:ICL_fac) %>% as.matrix() %>% as.data.frame()
measures <- lapply(X = measures, FUN = factor, levels = c("-1", "0", "1"), labels = c("-1", "0", "1")) %>% as.data.frame()
Results_final[, 10:21] <- measures
# Check mean results per simulation factor
# Create a function for this
count_results <- function(data, by, type = "count"){
# Extract necessary columns
reduced <- data %>% dplyr::select(Chull:ICL_fac)
#Initialize objects to store
counted        <- vector(mode = "list", length = ncol(reduced))
names(counted) <- colnames(reduced)
final <- c()
# browser()
# Count per column
for(i in 1:ncol(reduced)){
if(length(by) == 1 && by == "total"){
counted[[i]] <- data %>% count(get(colnames(reduced)[i]), .drop = F) %>% filter(!is.na(`get(colnames(reduced)[i])`)) # Count and remove NA
if(type == "relative"){
counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]]), drop = F]/sum(counted[[i]][, ncol(counted[[i]]), drop = F]), 3)
}
# browser()
colnames(counted[[i]]) <- c("result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, 1, drop = F], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
} else {
# browser()
counted[[i]] <- data %>% group_by(across(all_of(by))) %>% count(get(colnames(reduced)[i]), .drop = F) %>% filter(!is.na(`get(colnames(reduced)[i])`)) # count per measure
# browser()
if(type == "relative"){
counted[[i]] <- counted[[i]] %>% group_by(across(all_of(by))) %>% mutate(prop_n = n / sum(n)) %>% select(!n)
# counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]])]/sum(counted[[i]][1:3, ncol(counted[[i]])],), 3)
}
colnames(counted[[i]]) <- c(by, "result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, c(seq_len(length(by)), (length(by) + 1))], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
}
}
return(final)
}
# Pre-check to know if there are NAs
colSums(apply(Results_final, 2, is.na))
View(Results_final)
# Main effects
count_results(data = Results_final, by = "total", type = "relative")
# HEATMAP
a <- count_results(data = Results_final, by = c("sd", "N_g"), type = "relative") %>% filter(result == "0")
a1 <- a %>% dplyr::select(sd, N_g, Chull:ICL) %>% pivot_longer(cols = Chull:ICL, names_to = "Measure", values_to = "Proportion")
a1$Proportion <- round(a1$Proportion, 3)
a1$Measure <- factor(a1$Measure, levels = c("BIC_N", "ICL", "BIC_G", "AIC3", "AIC", "Chull"))
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~N_g) +
geom_tile(aes(fill = Proportion)) + geom_text(aes(label = Proportion), size = 3.2) +
scale_fill_gradient(low = "yellow", high = "green4") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL)) +
labs(x = expression("Within-cluster differences (" * sigma[beta] * ")"),  # Combines text with Greek letter, no space
y = expression("Model Selection measure")) +
scale_y_discrete(labels = c("Chull" = "CHull",
"AIC" = "AIC",
"AIC3" = expression(AIC[3]),
"BIC_G" = expression(BIC[G]),
"ICL" = "ICL",
"BIC_N" = expression(BIC[N])))
# +
# scale_y_discrete(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL))
plot
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~N_g) +
geom_tile(aes(fill = Proportion)) + geom_text(aes(label = Proportion), size = 3.2) +
scale_fill_gradient(low = "yellow", high = "green4") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Within-group sample size", breaks = NULL, labels = NULL)) +
labs(x = expression("Within-cluster differences (" * sigma[beta] * ")"),  # Combines text with Greek letter, no space
y = expression("Model Selection measure")) +
scale_y_discrete(labels = c("Chull" = "CHull",
"AIC" = "AIC",
"AIC3" = expression(AIC[3]),
"BIC_G" = expression(BIC[G]),
"ICL" = "ICL",
"BIC_N" = expression(BIC[N])))
plot
# TABLES
K_res   <- count_results(data = Results_final, by = c("nclus"), type = "relative")   %>% select(nclus:ICL)
N_res   <- count_results(data = Results_final, by = c("N_g"), type = "relative")     %>% select(N_g:ICL)
G_res   <- count_results(data = Results_final, by = c("ngroups"), type = "relative") %>% select(ngroups:ICL)
B_res   <- count_results(data = Results_final, by = c("coeff"), type = "relative")   %>% select(coeff:ICL)
Bal_res <- count_results(data = Results_final, by = c("balance"), type = "relative") %>% select(balance:ICL)
sd_res  <- count_results(data = Results_final, by = c("sd"), type = "relative")      %>% select(sd:ICL)
to_res  <- count_results(data = Results_final, by = "total", type = "relative")      %>% select(result:ICL)
K_res   <- K_res %>%
pivot_longer(cols = -c(nclus, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = nclus, values_from = value, names_prefix = "nclus") %>%
relocate(metric) %>% arrange(metric)
N_res   <- N_res %>%
pivot_longer(cols = -c(N_g, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = N_g, values_from = value, names_prefix = "N_g") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("N_g"))
G_res   <- G_res %>%
pivot_longer(cols = -c(ngroups, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = ngroups, values_from = value, names_prefix = "ngroups") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("ngroups"))
B_res   <- B_res %>%
pivot_longer(cols = -c(coeff, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = coeff, values_from = value, names_prefix = "coeff") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("coeff"))
Bal_res <- Bal_res %>%
pivot_longer(cols = -c(balance, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = balance, values_from = value, names_prefix = "balance") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("balance"))
sd_res  <- sd_res %>%
pivot_longer(cols = -c(sd, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = sd, values_from = value, names_prefix = "sd") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("sd"))
to_res  <- to_res %>%
pivot_longer(cols = -c(result), names_to = "metric", values_to = "value") %>%
relocate(metric) %>% arrange(metric) %>% select(value)
final <- cbind(K_res, N_res, G_res, B_res, Bal_res, sd_res, to_res)
# Add totals per column
total_col <- cbind("total", final %>% group_by(result) %>% summarise(across(where(is.numeric), mean, na.rm = TRUE)))
colnames(total_col)[1] <- "metric"; colnames(total_col)[ncol(total_col)] <- "value"
final <- rbind(final, total_col)
View(final)
print(xtable(final), include.rownames=FALSE)
final <- final %>% select(metric, result, `N\_g50`, `N\_g100`, `N\_g200`, ngroups24, ngroups48, sd0, sd0.05, sd0.1, value)
final$N_g50
final <- final %>% select(metric, result, N_g50, N_g100, N_g200, ngroups24, ngroups48, sd0, sd0.05, sd0.1, value)
print(xtable(final), include.rownames=FALSE)
# TABLES
K_res   <- count_results(data = Results_final, by = c("nclus"), type = "relative")   %>% select(nclus:ICL)
N_res   <- count_results(data = Results_final, by = c("N_g"), type = "relative")     %>% select(N_g:ICL)
G_res   <- count_results(data = Results_final, by = c("ngroups"), type = "relative") %>% select(ngroups:ICL)
B_res   <- count_results(data = Results_final, by = c("coeff"), type = "relative")   %>% select(coeff:ICL)
Bal_res <- count_results(data = Results_final, by = c("balance"), type = "relative") %>% select(balance:ICL)
sd_res  <- count_results(data = Results_final, by = c("sd"), type = "relative")      %>% select(sd:ICL)
to_res  <- count_results(data = Results_final, by = "total", type = "relative")      %>% select(result:ICL)
K_res   <- K_res %>%
pivot_longer(cols = -c(nclus, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = nclus, values_from = value, names_prefix = "nclus") %>%
relocate(metric) %>% arrange(metric)
N_res   <- N_res %>%
pivot_longer(cols = -c(N_g, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = N_g, values_from = value, names_prefix = "N_g") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("N_g"))
G_res   <- G_res %>%
pivot_longer(cols = -c(ngroups, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = ngroups, values_from = value, names_prefix = "ngroups") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("ngroups"))
B_res   <- B_res %>%
pivot_longer(cols = -c(coeff, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = coeff, values_from = value, names_prefix = "coeff") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("coeff"))
Bal_res <- Bal_res %>%
pivot_longer(cols = -c(balance, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = balance, values_from = value, names_prefix = "balance") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("balance"))
sd_res  <- sd_res %>%
pivot_longer(cols = -c(sd, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = sd, values_from = value, names_prefix = "sd") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("sd"))
to_res  <- to_res %>%
pivot_longer(cols = -c(result), names_to = "metric", values_to = "value") %>%
relocate(metric) %>% arrange(metric) %>% select(value)
final <- cbind(K_res, N_res, G_res, B_res, Bal_res, sd_res, to_res)
# Add totals per column
total_col <- cbind("total", final %>% group_by(result) %>% summarise(across(where(is.numeric), mean, na.rm = TRUE)))
colnames(total_col)[1] <- "metric"; colnames(total_col)[ncol(total_col)] <- "value"
final <- rbind(final, total_col)
final <- final %>% select(metric, result, N_g50, N_g100, N_g200, ngroups24, ngroups48, sd0, sd0.05, sd0.1, value) %>% filter(result != -1)
print(xtable(final), include.rownames=FALSE)
load("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Fit/FitRow1Rep10-1.Rdata")
load("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Fit/FitRow1Rep10-1.Rdata")
results$Overview
# Set wd
setwd("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Results")
# Load empty final results matrix
load("FinalResults.Rdata")
colnames(Results_final)[1:13] <- c("entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
load("design.Rdata")
# Merge datasets
design$Condition <- as.numeric(rownames(design))
Results_final <- merge(x = design, y = Results_final, by = "Condition")
col_order <- c("Condition", "Replication", "nclus", "ngroups", "coeff", "N_g", "balance", "sd",
"entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
Results_final <- Results_final[, col_order]
rm(col_order)
# Fill in the matrix with all results
ncond <- unique(Results_final$Condition) # How many conditions?
K <- length(unique(Results_final$Replication)) # How many replications?
for (i in ncond) {
test <- NA
test <- try(load(paste0("ResultRow", i, ".Rdata")))
if(!c(class(test) == "try-error")){
Results_final[(K*(i-1)+1):(i*K), 9:21] <- ResultsRow
}
}
View(design)
load("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Fit/FitRow18Rep97-4.Rdata")
results$Overview
plot(results$Overview$nrpar, results$Overview$LL); lines(results$Overview$nrpar, results$Overview$LL)
load("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Fit/FitRow18Rep75-2.Rdata")
plot(results$Overview$nrpar, results$Overview$LL); lines(results$Overview$nrpar, results$Overview$LL)
load("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Fit/FitRow18Rep61-1.Rdata")
plot(results$Overview$nrpar, results$Overview$LL); lines(results$Overview$nrpar, results$Overview$LL)
load("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Fit/FitRow16Rep51-3.Rdata")
plot(results$Overview$nrpar, results$Overview$LL); lines(results$Overview$nrpar, results$Overview$LL)
# HEATMAP
a <- count_results(data = Results_final, by = c("sd", "N_g"), type = "relative") %>% filter(result == "0")
# REMEMBER THAT THE RESULTS MUST TYPE "FACTOR"
measures <- Results_final %>% dplyr::select(Chull:ICL_fac) %>% as.matrix() %>% as.data.frame()
measures <- lapply(X = measures, FUN = factor, levels = c("-1", "0", "1"), labels = c("-1", "0", "1")) %>% as.data.frame()
Results_final[, 10:21] <- measures
# Check mean results per simulation factor
# Create a function for this
count_results <- function(data, by, type = "count"){
# Extract necessary columns
reduced <- data %>% dplyr::select(Chull:ICL_fac)
#Initialize objects to store
counted        <- vector(mode = "list", length = ncol(reduced))
names(counted) <- colnames(reduced)
final <- c()
# browser()
# Count per column
for(i in 1:ncol(reduced)){
if(length(by) == 1 && by == "total"){
counted[[i]] <- data %>% count(get(colnames(reduced)[i]), .drop = F) %>% filter(!is.na(`get(colnames(reduced)[i])`)) # Count and remove NA
if(type == "relative"){
counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]]), drop = F]/sum(counted[[i]][, ncol(counted[[i]]), drop = F]), 3)
}
# browser()
colnames(counted[[i]]) <- c("result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, 1, drop = F], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
} else {
# browser()
counted[[i]] <- data %>% group_by(across(all_of(by))) %>% count(get(colnames(reduced)[i]), .drop = F) %>% filter(!is.na(`get(colnames(reduced)[i])`)) # count per measure
# browser()
if(type == "relative"){
counted[[i]] <- counted[[i]] %>% group_by(across(all_of(by))) %>% mutate(prop_n = n / sum(n)) %>% select(!n)
# counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]])]/sum(counted[[i]][1:3, ncol(counted[[i]])],), 3)
}
colnames(counted[[i]]) <- c(by, "result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, c(seq_len(length(by)), (length(by) + 1))], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
}
}
return(final)
}
# HEATMAP
a <- count_results(data = Results_final, by = c("sd", "N_g"), type = "relative") %>% filter(result == "0")
a1 <- a %>% dplyr::select(sd, N_g, Chull:ICL) %>% pivot_longer(cols = Chull:ICL, names_to = "Measure", values_to = "Proportion")
a1$Proportion <- round(a1$Proportion, 3)
a1$Measure <- factor(a1$Measure, levels = c("BIC_N", "ICL", "BIC_G", "AIC3", "AIC", "Chull"))
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~N_g) +
geom_tile(aes(fill = Proportion)) + geom_text(aes(label = Proportion), size = 3.2) +
scale_fill_gradient(low = "yellow", high = "green4") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Within-group sample size", breaks = NULL, labels = NULL)) +
labs(x = expression("Within-cluster differences (" * sigma[beta] * ")"),  # Combines text with Greek letter, no space
y = expression("Model Selection measure")) +
scale_y_discrete(labels = c("Chull" = "CHull",
"AIC" = "AIC",
"AIC3" = expression(AIC[3]),
"BIC_G" = expression(BIC[G]),
"ICL" = "ICL",
"BIC_N" = expression(BIC[N])))
# +
# scale_y_discrete(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL))
plot
# 12-11-2024
# Analysis CHull - Simulation K = 1
# Load packages
library(tidyr)
# 12-11-2024
# Analysis CHull - Simulation K = 1
# Load packages
library(tidyr)
?max
# Create a matrix to store the maximum scree ratio
results_matrix <- matrix(data = NA,
nrow = (n_cond * K),
ncol = 4)
# Define relevant objects
n_cond <- 18 # Number of conditions
K      <- 100 # Number of replications
# Create a matrix to store the maximum scree ratio
results_matrix <- matrix(data = NA,
nrow = (n_cond * K),
ncol = 4)
colnames(results_matrix) <- c("Condition", "Replication", "Scree", "Selected_K")
results_matrix <- as.data.frame(results_matrix)
View(results_matrix)
setwd("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1")
# Load results and input into the matrix
setwd("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Fit")
# Load results and input into the matrix
# Prepare new load function
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
rep(x = 1:18, each = 100)
results_matrix$Condition <- rep(x = 1:18, each = 100)
rep(x = 1:100, times = 18)
# 12-11-2024
# Analysis CHull - Simulation K = 1
# Load packages
library(tidyr)
# Define relevant objects
n_cond <- 18 # Number of conditions
K      <- 100 # Number of replications
# Create a matrix to store the maximum scree ratio
results_matrix <- matrix(data = NA,
nrow = (n_cond * K),
ncol = 4)
colnames(results_matrix)   <- c("Condition", "Replication", "Scree", "Selected_K")
results_matrix             <- as.data.frame(results_matrix)
results_matrix$Condition   <- rep(x = 1:18, each = 100)
results_matrix$Replication <- rep(x = 1:100, times = 18)
# Load results and input into the matrix
# Prepare new load function
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
setwd("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Fit")
View(results_matrix)
load("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Fit/FitRow1Rep2-1.Rdata")
max(c(NA, NA))
max(c(NA, NA, 1))
max(c(NA, NA), na.rm = T)
max(c(NA, NA, 1), na.rm = T)
max(c(NA, NA), na.rm = T)
which.max(c(NA, NA, 1), na.rm = T)
which.max(c(NA, NA, 1))
which.max(c(NA, NA))
setwd("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Fit")
ik <- 0
for(i in 1:n_cond){
for(k in 1:K){
ik <- ik + 1
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
results_row <- loadRData(file)
results_row <- results_row$Overview$Chull
results_matrix[ik, "Scree"]      <- ifelse(test = all(is.na(results_row)), yes = NA, no = max(results_row, na.rm = T))
results_matrix[ik, "Selected_K"] <- ifelse(test = all(is.na(results_row)), yes = NA, no = which.max(results_row))
}
}
View(results_matrix)
colMeans(results_matrix)
colMeans(results_matrix, na.rm = T)
mean(x = is.finite(results_matrix$Scree))
mean(x = is.finite(results_matrix$Selected_K))
is.finite(results_matrix$Selected_K)
mean(results_matrix$Selected_K, na.rm = T)
mean(x = results_matrix$Scree[is.finite(results_matrix$Scree)])
mean(x = results_matrix$Selected_K[is.finite(results_matrix$Selected_K)])
load("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Fit/FitRow3Rep29-1.Rdata")
results$Overview
plot(results$Overview$nrpar, results$Overview$LL); lines(results$Overview$nrpar, results$Overview$LL)
load("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Fit/FitRow7Rep1-1.Rdata")
plot(results$Overview$nrpar, results$Overview$LL); lines(results$Overview$nrpar, results$Overview$LL)
results$Overview
load("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Results/design.Rdata")
View(design)
load("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Fit/FitRow16Rep92-2.Rdata")
results$Overview
plot(results$Overview$nrpar, results$Overview$LL); lines(results$Overview$nrpar, results$Overview$LL)
# 12-11-2024
# Analysis CHull - Simulation K = 1
# Load packages
library(tidyr)
# Define relevant objects
n_cond <- 18 # Number of conditions
K      <- 100 # Number of replications
# Create a matrix to store the maximum scree ratio
results_matrix <- matrix(data = NA,
nrow = (n_cond * K),
ncol = 5)
colnames(results_matrix)   <- c("Condition", "Replication", "Scree", "Selected_K", "Scree_fac")
results_matrix             <- as.data.frame(results_matrix)
results_matrix$Condition   <- rep(x = 1:18, each = 100)
results_matrix$Replication <- rep(x = 1:100, times = 18)
# Load results and input into the matrix
# Prepare new load function
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
setwd("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Fit")
ik <- 0
for(i in 1:n_cond){
for(k in 1:K){
ik <- ik + 1
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
results_row <- loadRData(file)
Chull_fac   <- results_row$Overview$Chull_fac
Chull       <- results_row$Overview$Chull
results_matrix[ik, "Scree"]      <- ifelse(test = all(is.na(Chull)), yes = NA, no = max(Chull, na.rm = T))
results_matrix[ik, "Selected_K"] <- ifelse(test = all(is.na(Chull)), yes = NA, no = which.max(Chull))
results_matrix[ik, "Scree_fac"]  <- ifelse(test = all(is.na(Chull_fac)), yes = NA, no = max(Chull_fac, na.rm = T))
}
}
mean(x = results_matrix$Scree[is.finite(results_matrix$Scree)])
mean(x = results_matrix$Selected_K[is.finite(results_matrix$Selected_K)])
mean(x = results_matrix$Scree[is.finite(results_matrix$Scree_fac)])
mean(x = results_matrix$Scree_fac[is.finite(results_matrix$Scree_fac)])
View(results_matrix)
load("C:/Users/perezalo/OneDrive - Tilburg University/1. Papers/Paper 2/Methodology (Journal)/Review/Simulation results/ModelSelection_Simulation/Post-Review/K1/Fit/FitRow7Rep3-1.Rdata")
results$Overview
plot(results$Overview$nrpar, results$Overview$LL_fac); lines(results$Overview$nrpar, results$Overview$LL_fac)
720/2
278/360
55637451/14600
