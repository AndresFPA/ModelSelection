rm(balance, coeff, N_g, nclus, ngroups, sd) #, NonInvG, NonInvItems, NonInvSize, reliability, ResRange)
# Remove unnecessary rows
design <- design[design$ngroups == 24, ]
# Rename rownames
rownames(design) <- seq_len(nrow(design))
# Run mini "sim"
R2 <- vector(mode = "list", length = 72)
K <- 300
set.seed(1)
for(i in 1:72){
print(i)
R2[[i]] <- numeric(K)
for(k in 1:K){
print(k)
R2[[i]][k] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 192,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
}
lapply(X = R2, FUN = mean)
View(design)
unlist(lapply(X = R2, FUN = mean))
design$R2 <- unlist(lapply(X = R2, FUN = mean))
View(design)
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
library(lavaan)
# Simulation Design
# Which factors are going to be tested? For now:
nclus   <- c(2, 4)         # Number of clusters
ngroups <- c(24, 48)       # Number of groups
coeff   <- c(0.3, 0.4)     # Initial regression parameters
N_g     <- c(50, 100, 200) # Sample size per groups
balance <- c("bal", "unb") # Cluster size
sd      <- c(0, 0.05, 0.1) # Differences within a cluster (in betas)
# reliability <- c("low")
# NonInvSize <- c(0.6)
# ResRange <- 0.2
# NonInvItems <- 2
# NonInvG <- c(0.50)
# NonInvType <- c("fixed")
model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
S1 <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
'
S2 <- '
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
# Get design matrix
design <- expand.grid(nclus, ngroups, coeff, N_g, balance, sd, model) # , reliability, NonInvSize, ResRange,
# NonInvItems, NonInvG, NonInvType)
colnames(design) <- c("nclus", "ngroups", "coeff", "N_g", "balance", "sd", "model")
# "reliability", "NonInvSize", "ResRange", "NonInvItems", "NonInvG", "NonInvType")
rownames(design) <- NULL
rm(balance, coeff, N_g, nclus, ngroups, sd) #, NonInvG, NonInvItems, NonInvSize, reliability, ResRange)
# Remove unnecessary rows
design <- design[design$ngroups == 24, ]
# Rename rownames
rownames(design) <- seq_len(nrow(design))
# Run mini "sim"
R2 <- vector(mode = "list", length = 72)
K <- 300
set.seed(1)
for(i in 1:72){
print(i)
R2[[i]] <- numeric(K)
for(k in 1:K){
print(k)
R2[[i]][k] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 192,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
}
load("~/GitHub/ModelSelection_Simulation/Entropy/PopR2Results.Rdata")
nclus   <- c(2, 4)         # Number of clusters
ngroups <- c(24, 48)       # Number of groups
coeff   <- c(0.3, 0.4)     # Initial regression parameters
N_g     <- c(50, 100, 200) # Sample size per groups
balance <- c("bal", "unb") # Cluster size
sd      <- c(0, 0.05, 0.1) # Differences within a cluster (in betas)
# reliability <- c("low")
# NonInvSize <- c(0.6)
# ResRange <- 0.2
# NonInvItems <- 2
# NonInvG <- c(0.50)
# NonInvType <- c("fixed")
model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
S1 <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
'
S2 <- '
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
# Get design matrix
design <- expand.grid(nclus, ngroups, coeff, N_g, balance, sd, model) # , reliability, NonInvSize, ResRange,
# NonInvItems, NonInvG, NonInvType)
colnames(design) <- c("nclus", "ngroups", "coeff", "N_g", "balance", "sd", "model")
# "reliability", "NonInvSize", "ResRange", "NonInvItems", "NonInvG", "NonInvType")
rownames(design) <- NULL
rm(balance, coeff, N_g, nclus, ngroups, sd) #, NonInvG, NonInvItems, NonInvSize, reliability, ResRange)
design$R2 <- unlist(lapply(X = R2, FUN = mean))
# Simulation Design
# Which factors are going to be tested? For now:
nclus   <- c(2, 4)         # Number of clusters
ngroups <- c(24, 48)       # Number of groups
coeff   <- c(0.3, 0.4)     # Initial regression parameters
N_g     <- c(50, 100, 200) # Sample size per groups
balance <- c("bal", "unb") # Cluster size
sd      <- c(0, 0.05, 0.1) # Differences within a cluster (in betas)
# reliability <- c("low")
# NonInvSize <- c(0.6)
# ResRange <- 0.2
# NonInvItems <- 2
# NonInvG <- c(0.50)
# NonInvType <- c("fixed")
model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
S1 <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
'
S2 <- '
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
# Get design matrix
design <- expand.grid(nclus, ngroups, coeff, N_g, balance, sd, model) # , reliability, NonInvSize, ResRange,
# NonInvItems, NonInvG, NonInvType)
colnames(design) <- c("nclus", "ngroups", "coeff", "N_g", "balance", "sd", "model")
# "reliability", "NonInvSize", "ResRange", "NonInvItems", "NonInvG", "NonInvType")
rownames(design) <- NULL
rm(balance, coeff, N_g, nclus, ngroups, sd) #, NonInvG, NonInvItems, NonInvSize, reliability, ResRange)
# Remove unnecessary rows
design <- design[design$ngroups == 24, ]
design$R2 <- unlist(lapply(X = R2, FUN = mean))
summary(unlist(lapply(X = R2, FUN = mean)))
View(R2)
View(design)
library(lavaan)
library(qwraps2)
library(fpp3)
library(dplyr)
library(xtable)
library(ggpubr)
library(ggplot2)
library(ggthemes)
# library(Cairo)
# CairoWin()
# Set wd
setwd("~/GitHub/ModelSelection_Simulation/Results")
# Load empty final results matrix
load("FinalResults.Rdata")
colnames(Results_final)[1:13] <- c("entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
load("design.Rdata")
# Load and re-analyze the data to correct minor error in Chull evaluation (which.min instead of which.max)
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
source("~/GitHub/ModelSelection_Simulation/evaluation.R", echo=TRUE) # Source corrected evaluation script
setwd("~/GitHub/ModelSelection_Simulation/Results/Fit") # Set correct wd
ik <- 0
for(i in 1:144){
for(k in 1:50){
ik <- ik + 1
# browser()
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
load(file)
res  <- vector(mode = "list", length = 1); res[[1]] <- results_ov; names(res) <- "Overview" # This line used only so evaluation has correct input
eval <- evaluation(res = res, clus = design[i, "nclus"])
Results_final[ik, 1:13] <- unlist(eval)
}
}
# Merge datasets
design$Condition <- as.numeric(rownames(design))
Results_final <- merge(x = design, y = Results_final, by = "Condition")
col_order <- c("Condition", "Replication", "nclus", "ngroups", "coeff", "N_g", "balance", "sd",
"entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
Results_final <- Results_final[, col_order]
rm(col_order)
# Fill in the matrix with all results
ncond <- unique(Results_final$Condition) # How many conditions?
K <- length(unique(Results_final$Replication)) # How many replications?
# for (i in ncond) {
#   test <- NA
#   test <- try(load(paste0("ResultRow", i, ".Rdata")))
#   if(!c(class(test) == "try-error")){
#     Results_final[(K*(i-1)+1):(i*K), 9:21] <- ResultsRow
#   }
# }
# remove uncomplete entries
Results_final <- Results_final[!is.na(Results_final$BIC_G), ]
# Turn NAs from Chull into FALSE input (Chull was not able to select any model)
# apply(X = apply(X = Results_final, MARGIN = 2, FUN = is.na), MARGIN = 2, FUN = sum)
# Results_final$`Chull Scree` <- ifelse(test = is.na(Results_final$`Chull Scree`), yes = FALSE, no = Results_final$`Chull Scree`)
# Transform to factor
# changed <- Results_final %>% dplyr::select(Chull:ICL_fac) %>% as.matrix() %>% as.data.frame() %>%
#   mutate(
#     Chull     = recode(Chull, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     BIC_G     = recode(BIC_G, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     BIC_N     = recode(BIC_N, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     AIC       = recode(AIC, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     AIC3      = recode(AIC3, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     ICL       = recode(ICL, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     Chull_fac = recode(Chull_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     BIC_G_fac = recode(BIC_G_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     BIC_N_fac = recode(BIC_N_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     AIC_fac   = recode(AIC_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     AIC3_fac  = recode(AIC3_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     ICL_fac   = recode(ICL_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1")
#   )
measures <- Results_final %>% dplyr::select(Chull:ICL_fac) %>% as.matrix() %>% as.data.frame()
measures <- lapply(X = measures, FUN = factor, levels = c("-1", "0", "1"), labels = c("Under", "Correct", "Over")) %>% as.data.frame()
Results_final[, 10:21] <- measures
Results_final[, "entropyR2"] <- as.numeric(Results_final[, "entropyR2"])
####################################################################################################
############################ TABLES - CLUSTER AND PARAMETER RECOVERY ###############################
####################################################################################################
# Check mean results per simulation factor
# Create a function for this
count_results <- function(data, by, type = "count"){
# Extract necessary columns
reduced <- data %>% dplyr::select(Chull:ICL_fac)
#Initialize objects to store
counted        <- vector(mode = "list", length = ncol(reduced))
names(counted) <- colnames(reduced)
final <- c()
# browser()
# Count per column
for(i in 1:ncol(reduced)){
if(length(by) == 1 && by == "total"){
counted[[i]] <- data %>% count(get(colnames(reduced)[i]), .drop = F) %>% filter(!is.na(`get(colnames(reduced)[i])`)) # Count and remove NA
if(type == "relative"){
counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]]), drop = F]/sum(counted[[i]][, ncol(counted[[i]]), drop = F]), 3)
}
# browser()
colnames(counted[[i]]) <- c("result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, 1, drop = F], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
} else {
# browser()
counted[[i]] <- data %>% group_by(across(all_of(by))) %>% count(get(colnames(reduced)[i]), .drop = F) %>% filter(!is.na(`get(colnames(reduced)[i])`)) # count per measure
# browser()
if(type == "relative"){
counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]])]/sum(counted[[i]][1:3, ncol(counted[[i]])]), 3)
}
colnames(counted[[i]]) <- c(by, "result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, c(seq_len(length(by)), (length(by) + 1))], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
}
}
return(final)
}
# Pre-check to know if there are NAs
colSums(apply(Results_final, 2, is.na))
# Main effects
count_results(data = Results_final, by = "total", type = "relative")
save(Results_final, file = "FinalResCorrectModel.Rdata")
K_res   <- count_results(data = Results_final, by = c("nclus"), type = "relative")
N_res   <- count_results(data = Results_final, by = c("N_g"), type = "relative")
G_res   <- count_results(data = Results_final, by = c("ngroups"), type = "relative")
B_res   <- count_results(data = Results_final, by = c("coeff"), type = "relative")
Bal_res <- count_results(data = Results_final, by = c("balance"), type = "relative")
sd_res  <- count_results(data = Results_final, by = c("sd"), type = "relative")
count_results(data = Results_final, by = c("sd", "N_g"), type = "relative")
mean(Results_final$entropyR2)
View(Results_final %>% group_by(nclus, N_g, ngroups, coeff, balance, sd) %>% summarise(across(entropyR2, mean)))
Results_final %>% group_by(nclus) %>% summarise(across(entropyR2, mean))
Results_final %>% group_by(N_g) %>% summarise(across(entropyR2, mean))
Results_final %>% group_by(ngroups) %>% summarise(across(entropyR2, mean))
Results_final %>% group_by(coeff) %>% summarise(across(entropyR2, mean))
Results_final %>% group_by(balance) %>% summarise(across(entropyR2, mean))
Results_final %>% group_by(sd) %>% summarise(across(entropyR2, mean))
# HEATMAP
a <- count_results(data = Results_final, by = c("sd", "nclus"), type = "relative") %>% filter(result == "Correct")
a1 <- a %>% dplyr::select(sd, nclus, Chull:ICL) %>% pivot_longer(cols = Chull:ICL, names_to = "Measure", values_to = "Proportion")
a1$Measure <- factor(a1$Measure, levels = c("BIC_N", "ICL", "BIC_G", "AIC3", "AIC", "Chull"))
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~nclus) +
geom_tile(aes(fill = Proportion)) + geom_text(aes(label = Proportion), size = 3.2) +
scale_fill_gradient(low = "yellow", high = "green4") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL)) +
labs(x = expression("Within-cluster differences (" * sigma[beta] * ")"),  # Combines text with Greek letter, no space
y = expression("Model Selection measure")) +
scale_y_discrete(labels = c("Chull" = "CHull",
"AIC" = "AIC",
"AIC3" = expression(AIC[3]),
"BIC_G" = expression(BIC[G]),
"ICL" = "ICL",
"BIC_N" = expression(BIC[N])))
# +
# scale_y_discrete(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL))
plot
# Load a second Results_final
ARI_res <- Results_final %>% dplyr::select(Condition:sd)
# Modify for the ARI results
ARI_res$ARI <- NA; ARI_res$CC <- NA
# Fill in the matrix with all results
ncond <- unique(ARI_res$Condition) # How many conditions?
K <- length(unique(ARI_res$Replication)) # How many replications?
for (i in ncond) {
test <- NA
test <- try(load(paste0("ResultRowARI", i, ".Rdata")))
if(!c(class(test) == "try-error")){
ARI_res[(K*(i-1)+1):(i*K), 9:10] <- ResultsRowARI
}
}
getwd
()
getwd()
setwd("~/GitHub/ModelSelection_Simulation/Results")
for (i in ncond) {
test <- NA
test <- try(load(paste0("ResultRowARI", i, ".Rdata")))
if(!c(class(test) == "try-error")){
ARI_res[(K*(i-1)+1):(i*K), 9:10] <- ResultsRowARI
}
}
Results_final$ARI <- ARI_res$ARI
final_ARI <- cbind(
Results_final %>% group_by(Chull) %>% summarise(across(ARI, mean)) %>% rename(Result = Chull, Chull = ARI) %>% drop_na(),
Results_final %>% group_by(AIC)   %>% summarise(across(ARI, mean)) %>% rename(Result = AIC,   AIC   = ARI) %>% select(AIC),
Results_final %>% group_by(AIC3)  %>% summarise(across(ARI, mean)) %>% rename(Result = AIC3,  AIC3  = ARI) %>% select(AIC3),
Results_final %>% group_by(BIC_G) %>% summarise(across(ARI, mean)) %>% rename(Result = BIC_G, BIC_G = ARI) %>% select(BIC_G),
Results_final %>% group_by(BIC_N) %>% summarise(across(ARI, mean)) %>% rename(Result = BIC_N, BIC_N = ARI) %>% select(BIC_N),
Results_final %>% group_by(ICL)   %>% summarise(across(ARI, mean)) %>% rename(Result = ICL,   ICL   = ARI) %>% select(ICL)
)
final_ARI %>% select(Result, AIC, AIC3, BIC_G, BIC_N, Chull, ICL) %>% xtable() %>% print(., include.rownames=FALSE)
final_ARI <- cbind(
Results_final %>% group_by(Chull) %>% summarise(across(ARI, qwraps2::mean_sd, denote_sd = "paren")) %>% rename(Result = Chull, Chull = ARI) %>% drop_na(),
Results_final %>% group_by(AIC)   %>% summarise(across(ARI, qwraps2::mean_sd, denote_sd = "paren")) %>% rename(Result = AIC,   AIC   = ARI) %>% select(AIC),
Results_final %>% group_by(AIC3)  %>% summarise(across(ARI, qwraps2::mean_sd, denote_sd = "paren")) %>% rename(Result = AIC3,  AIC3  = ARI) %>% select(AIC3),
Results_final %>% group_by(BIC_G) %>% summarise(across(ARI, qwraps2::mean_sd, denote_sd = "paren")) %>% rename(Result = BIC_G, BIC_G = ARI) %>% select(BIC_G),
Results_final %>% group_by(BIC_N) %>% summarise(across(ARI, qwraps2::mean_sd, denote_sd = "paren")) %>% rename(Result = BIC_N, BIC_N = ARI) %>% select(BIC_N),
Results_final %>% group_by(ICL)   %>% summarise(across(ARI, qwraps2::mean_sd, denote_sd = "paren")) %>% rename(Result = ICL,   ICL   = ARI) %>% select(ICL)
)
final_ARI %>% select(Result, AIC, AIC3, BIC_G, BIC_N, Chull, ICL) %>% xtable() %>% print(., include.rownames=FALSE)
mean(Results_final$ARI)
summary(Results_final$ARI)
View(final_ARI)
View(Results_final)
15.6/3
10.4+14+14
library(dplyr)
# Source evaluation
source("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/evaluationIncorClus.R")
load("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Results/FinalResults.Rdata")
load("~/GitHub/ModelSelection_Simulation/Results/design.Rdata")
# Set working directory
setwd("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Results/Fit")
# Load and re-analyze the data searching the second best model
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
ik <- 0
for(i in 1:144){
for(k in 1:50){
ik <- ik + 1
# browser()
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
load(file)
res  <- vector(mode = "list", length = 1); res[[1]] <- results_ov; names(res) <- "Overview" # This line used only so evaluation has correct input
eval <- evaluation(res = res, clus = design[i, "nclus"])
Results_final[ik, 1:13] <- unlist(eval)
}
}
View(results_ov)
# Pre-check to know if there are NAs
colSums(apply(Results_final2ndBest, 2, is.na))
# Pre-check to know if there are NAs
colSums(apply(Results_final, 2, is.na))
View(Results_final)
source("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/evaluationIncorClus.R", echo=TRUE)
# Load and re-analyze the data searching the second best model
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
ik <- 0
for(i in 1:144){
for(k in 1:50){
ik <- ik + 1
# browser()
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
load(file)
res  <- vector(mode = "list", length = 1); res[[1]] <- results_ov; names(res) <- "Overview" # This line used only so evaluation has correct input
eval <- evaluation(res = res, clus = design[i, "nclus"])
Results_final[ik, 1:13] <- unlist(eval)
}
}
colnames(Results_final) <- c("entropyR2",
"Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac",
"Replication", "Condition")
save(Results_final, file = "FinalResultsIncorClus.Rdata")
# Merge datasets
design$Condition <- as.numeric(rownames(design))
Results_final <- merge(x = design, y = Results_final, by = "Condition")
col_order <- c("Condition", "Replication", "nclus", "ngroups", "coeff", "N_g", "balance", "sd",
"entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
Results_final <- Results_final[, col_order]
rm(col_order)
# Make the results factor
measures <- Results_final %>% dplyr::select(Chull:ICL_fac) %>% as.matrix() %>% as.data.frame()
measures <- lapply(X = measures, FUN = factor, levels = c("-1", "0", "1"), labels = c("Under", "Correct", "Over")) %>% as.data.frame()
Results_final[, 10:21] <- measures
Results_final[, "entropyR2"] <- as.numeric(Results_final[, "entropyR2"])
Results_final2ndBest <- Results_final
sigma(c(1, 0, -1))
sign(c(1, 0, -1))
####################################################################################################
############################ TABLES - CLUSTER AND PARAMETER RECOVERY ###############################
####################################################################################################
# Get mean results for under- and over-selection
#
Results_final %>% filter(sign(Chull) == 1) %>% dplyr::select(Chull) %>% mean
View(Results_final)
load("~/GitHub/ModelSelection_Simulation/Results/FinalResultsIncorClus.Rdata")
load("~/GitHub/ModelSelection_Simulation/Results/FinalResultsIncorClus.Rdata")
# Merge datasets
design$Condition <- as.numeric(rownames(design))
Results_final <- merge(x = design, y = Results_final, by = "Condition")
col_order <- c("Condition", "Replication", "nclus", "ngroups", "coeff", "N_g", "balance", "sd",
"entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
Results_final <- Results_final[, col_order]
rm(col_order)
####################################################################################################
############################ TABLES - CLUSTER AND PARAMETER RECOVERY ###############################
####################################################################################################
# Get mean results for under- and over-selection
#
Results_final %>% filter(sign(Chull) == 1) %>% dplyr::select(Chull) %>% mean
sign(Chull)
sign(Results_final$Chull)
Results_final %>% filter(sign(Chull) == 1)
Results_final %>% filter(sign(Chull) == 1) %>% dplyr::select(Chull)
####################################################################################################
############################ TABLES - CLUSTER AND PARAMETER RECOVERY ###############################
####################################################################################################
# Get mean results for under- and over-selection
#
Results_final %>% filter(sign(Chull) == 1) %>% dplyr::select(Chull) %>% mean()
glimpse(Results_final)
Results_final %>% filter(sign(Chull) == 1) %>% glimpse()
Results_final %>% filter(sign(Chull) == 1) %>% dplyr::select(Chull) %>% glimpse()
####################################################################################################
############################ TABLES - CLUSTER AND PARAMETER RECOVERY ###############################
####################################################################################################
# Get mean results for under- and over-selection
#
Results_final %>% filter(sign(Chull) == 1) %>% dplyr::select(Chull) %>% colMeans()
# Under-selection
Results_final %>% filter(sign(Chull) == -1) %>% dplyr::select(Chull) %>% colMeans()
Results_final %>% filter(sign(AIC)   == 1) %>% dplyr::select(Chull) %>% colMeans()
Results_final %>% filter(sign(AIC)   == 1) %>% dplyr::select(Chull) %>% colMeans()
Results_final %>% filter(sign(AIC3)  == 1) %>% dplyr::select(Chull) %>% colMeans()
Results_final %>% filter(sign(AIC)   == 1) %>% dplyr::select(AIC)   %>% colMeans()
Results_final %>% filter(sign(AIC3)  == 1) %>% dplyr::select(AIC3)  %>% colMeans()
Results_final %>% filter(sign(BIC_G) == 1) %>% dplyr::select(BIC_G) %>% colMeans()
Results_final %>% filter(sign(BIC_N) == 1) %>% dplyr::select(BIC_N) %>% colMeans()
Results_final %>% filter(sign(ICL)   == 1) %>% dplyr::select(ICL)   %>% colMeans()
Results_final %>% filter(sign(AIC)   == -1) %>% dplyr::select(AIC)   %>% colMeans()
Results_final %>% filter(sign(AIC3)  == -1) %>% dplyr::select(AIC3)  %>% colMeans()
Results_final %>% filter(sign(BIC_G) == -1) %>% dplyr::select(BIC_G) %>% colMeans()
Results_final %>% filter(sign(BIC_N) == -1) %>% dplyr::select(BIC_N) %>% colMeans()
Results_final %>% filter(sign(ICL)   == -1) %>% dplyr::select(ICL)   %>% colMeans()
