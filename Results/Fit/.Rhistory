if(type == "relative"){
counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]])]/sum(counted[[i]][1:3, ncol(counted[[i]])]), 3)
}
colnames(counted[[i]]) <- c(by, "result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, c(seq_len(length(by)), (length(by) + 1))], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
}
}
return(final)
}
# Pre-check to know if there are NAs
colSums(apply(Results_final, 2, is.na))
# HEATMAP
a <- count_results(data = Results_final, by = c("sd", "nclus"), type = "relative") %>% filter(result == "Correct")
a1 <- a %>% dplyr::select(sd, nclus, Chull:ICL) %>% pivot_longer(cols = Chull:ICL, names_to = "Measure", values_to = "Value")
a1$Measure <- factor(a1$Measure, levels = c("BIC_N", "ICL", "BIC_G", "AIC3", "AIC", "Chull"))
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~nclus) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value), size = 3.2) +
scale_fill_gradient(low = "greenyellow", high = "green") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL)) +
labs(x = expression("Within-cluster differences (" * sigma[beta] * ")"),  # Combines text with Greek letter, no space
y = expression("Model Selection measure"))
plot
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~nclus) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value), size = 3.2) +
scale_fill_gradient(low = "greenyellow", high = "green3") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL)) +
labs(x = expression("Within-cluster differences (" * sigma[beta] * ")"),  # Combines text with Greek letter, no space
y = expression("Model Selection measure"))
plot
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~nclus) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value), size = 3.2) +
scale_fill_gradient(low = "greenyellow", high = "green4") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL)) +
labs(x = expression("Within-cluster differences (" * sigma[beta] * ")"),  # Combines text with Greek letter, no space
y = expression("Model Selection measure"))
plot
View(a1)
# HEATMAP
a <- count_results(data = Results_final, by = c("sd", "nclus"), type = "relative") %>% filter(result == "Correct")
a1 <- a %>% dplyr::select(sd, nclus, Chull:ICL) %>% pivot_longer(cols = Chull:ICL, names_to = "Measure", values_to = "Proportion")
a1$Measure <- factor(a1$Measure, levels = c(expression(BIC[N]),
"ICL",
"BIC_G",
"AIC3",
"AIC",
"Chull"))
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~nclus) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value), size = 3.2) +
scale_fill_gradient(low = "greenyellow", high = "green4") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL)) +
labs(x = expression("Within-cluster differences (" * sigma[beta] * ")"),  # Combines text with Greek letter, no space
y = expression("Model Selection measure"))
plot
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~nclus) +
geom_tile(aes(fill = Proportion)) + geom_text(aes(label = Value), size = 3.2) +
scale_fill_gradient(low = "greenyellow", high = "green4") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL)) +
labs(x = expression("Within-cluster differences (" * sigma[beta] * ")"),  # Combines text with Greek letter, no space
y = expression("Model Selection measure"))
plot
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~nclus) +
geom_tile(aes(fill = Proportion)) + geom_text(aes(label = Proportion), size = 3.2) +
scale_fill_gradient(low = "greenyellow", high = "green4") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL)) +
labs(x = expression("Within-cluster differences (" * sigma[beta] * ")"),  # Combines text with Greek letter, no space
y = expression("Model Selection measure"))
plot
# HEATMAP
a <- count_results(data = Results_final, by = c("sd", "nclus"), type = "relative") %>% filter(result == "Correct")
a1 <- a %>% dplyr::select(sd, nclus, Chull:ICL) %>% pivot_longer(cols = Chull:ICL, names_to = "Measure", values_to = "Proportion")
a1$Measure <- factor(a1$Measure, levels = c("BIC_N", "ICL", "BIC_G", "AIC3", "AIC", "Chull"))
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~nclus) +
geom_tile(aes(fill = Proportion)) + geom_text(aes(label = Proportion), size = 3.2) +
scale_fill_gradient(low = "greenyellow", high = "green4") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL)) +
labs(x = expression("Within-cluster differences (" * sigma[beta] * ")"),  # Combines text with Greek letter, no space
y = expression("Model Selection measure")) +
scale_y_discrete(labels = c("Chull" = "Chull",
"AIC" = "AIC",
"AIC3" = "AIC3",
"BIC_G" = "BIC_G",
"ICL" = "ICL",
"BIC_N" = expression(BIC[N])))
plot
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~nclus) +
geom_tile(aes(fill = Proportion)) + geom_text(aes(label = Proportion), size = 3.2) +
scale_fill_gradient(low = "greenyellow", high = "green4") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL)) +
labs(x = expression("Within-cluster differences (" * sigma[beta] * ")"),  # Combines text with Greek letter, no space
y = expression("Model Selection measure")) +
scale_y_discrete(labels = c("Chull" = "Chull",
"AIC" = "AIC",
"AIC3" = expression(AIC[3]),
"BIC_G" = expression(BIC[G]),
"ICL" = "ICL",
"BIC_N" = expression(BIC[N])))
plot
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~nclus) +
geom_tile(aes(fill = Proportion)) + geom_text(aes(label = Proportion), size = 3.2) +
scale_fill_gradient(low = "greenyellow", high = "green4") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL)) +
labs(x = expression("Within-cluster differences (" * sigma[beta] * ")"),  # Combines text with Greek letter, no space
y = expression("Model Selection measure")) +
scale_y_discrete(labels = c("Chull" = "CHull",
"AIC" = "AIC",
"AIC3" = expression(AIC[3]),
"BIC_G" = expression(BIC[G]),
"ICL" = "ICL",
"BIC_N" = expression(BIC[N])))
plot
setwd("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Results/Fit")
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
files_to_load <- list.files(pattern = "^FitRow.*\\.RData$")
# Set working directory
setwd("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Results/Fit")
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
files_to_load <- list.files(pattern = "^FitRow.*\\.RData$")
for(files in files_to_load){
load(file)
}
for(files in files_to_load){
load(files)
}
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
files_to_load <- list.files(pattern = "^FitRow.*\\.RData$")
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
files_to_load <- list.files(pattern = "^FitRow.*\\.RData$", full.names = T)
for(files in files_to_load){
load(files)
}
print(files_to_load)
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
files_to_load <- list.files(pattern = "^FitRow*\\.RData$", full.names = T)
getwd()
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
files_to_load <- list.files(pattern = "^FitRow*\\.RData$", all.files = T)
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
files_to_load <- list.files(pattern = "^FitRow*.\\.", all.files = T)
for(files in files_to_load){
load(files)
}
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
files_to_load <- list.files(pattern = "^FitRow", all.files = T)
load(files_to_load[1])
View(Overview)
source("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/evaluation")
source("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/evaluation.R")
load("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Results/FinalResults.Rdata")
# Set working directory
setwd("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Results/Fit")
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
files_to_load <- list.files(pattern = "^FitRow", all.files = T)
View(evaluation)
paste("^FitRow", i, "Rep", k)
paste("^FitRow", 2, "Rep", 1)
paste0("^FitRow", 2, "Rep", 1)
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
for(i in 1:144){
for(k in 1:50){
browser()
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k), all.files = T)
load(file)
Overview[1, ] <- NA
}
}
file
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
for(i in 1:144){
for(k in 1:50){
browser()
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
load(file)
Overview[1, ] <- NA
}
}
q
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
for(i in 1:144){
for(k in 1:50){
browser()
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
load(file)
Overview[1, ] <- NA
res <- vector(mode = "list", length = 1); res[[1]] <- Overview; names(res) <- "Overview"
evaluation(res = Overview, clus = Design[RowDesign, "nclus"])
}
}
res$Overview
View(Results_final)
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
ik <- 0
for(i in 1:144){
for(k in 1:50){
ik <- ik + 1
# browser()
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
load(file)
Overview[1, ] <- NA
res  <- vector(mode = "list", length = 1); res[[1]] <- Overview; names(res) <- "Overview" # This line used only so evaluation has correct input
eval <- evaluation(res = Overview, clus = design[i, "nclus"])
Results_final[ik, 1:13] <- unlist(eval)
}
}
for(i in 1:144){
for(k in 1:50){
ik <- ik + 1
browser()
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
load(file)
Overview[1, ] <- NA
res  <- vector(mode = "list", length = 1); res[[1]] <- Overview; names(res) <- "Overview" # This line used only so evaluation has correct input
eval <- evaluation(res = Overview, clus = design[i, "nclus"])
Results_final[ik, 1:13] <- unlist(eval)
}
}
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
ik <- 0
for(i in 1:144){
for(k in 1:50){
ik <- ik + 1
browser()
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
load(file)
Overview[1, ] <- NA
res  <- vector(mode = "list", length = 1); res[[1]] <- Overview; names(res) <- "Overview" # This line used only so evaluation has correct input
eval <- evaluation(res = Overview, clus = design[i, "nclus"])
Results_final[ik, 1:13] <- unlist(eval)
}
}
res
evaluation <- function(res, clus){
browser()
# Create the matrix to be returned
res           <- res$Overview
rmv.idx       <- which(colnames(res) %in% c("Clusters", "LL", "nrpar", "LL_fac", "nrpar_fac"))
evaluated     <- res[1, -rmv.idx, drop = F]
evaluated[, ] <- NA
evaluated     <- as.data.frame(evaluated)
res <- as.data.frame(res)
# Fill in the matrix: Does the selected model correspond with the true model?
# TRUE  = We matched the correct clustering
# Under = We under selected
# Over  = We over selected
evaluated$R2entropy <- res$R2entropy[[clus]]
evaluated$Chull <- ifelse(all(is.na(res$Chull)), NA, ifelse(which.max(res$Chull) == clus, 0, ifelse(which.min(res$Chull) < clus, -1, 1)))
evaluated$BIC_G <- ifelse(which.min(res$BIC_G) == clus, 0, ifelse(which.min(res$BIC_G) < clus, -1, 1))
evaluated$BIC_N <- ifelse(which.min(res$BIC_N) == clus, 0, ifelse(which.min(res$BIC_N) < clus, -1, 1))
evaluated$AIC   <- ifelse(which.min(res$AIC)   == clus, 0, ifelse(which.min(res$AIC)   < clus, -1, 1))
evaluated$AIC3  <- ifelse(which.min(res$AIC3)  == clus, 0, ifelse(which.min(res$AIC3)  < clus, -1, 1))
evaluated$ICL   <- ifelse(which.min(res$ICL)   == clus, 0, ifelse(which.min(res$ICL)   < clus, -1, 1))
evaluated$Chull_fac <- ifelse(all(is.na(res$Chull_fac)), NA, ifelse(which.max(res$Chull_fac) == clus, 0, ifelse(which.min(res$Chull_fac) < clus, -1, 1)))
evaluated$BIC_G_fac <- ifelse(which.min(res$BIC_G_fac) == clus, 0, ifelse(which.min(res$BIC_G_fac) < clus, -1, 1))
evaluated$BIC_N_fac <- ifelse(which.min(res$BIC_N_fac) == clus, 0, ifelse(which.min(res$BIC_N_fac) < clus, -1, 1))
evaluated$AIC_fac   <- ifelse(which.min(res$AIC_fac)   == clus, 0, ifelse(which.min(res$AIC_fac)   < clus, -1, 1))
evaluated$AIC3_fac  <- ifelse(which.min(res$AIC3_fac)  == clus, 0, ifelse(which.min(res$AIC3_fac)  < clus, -1, 1))
evaluated$ICL_fac   <- ifelse(which.min(res$ICL_fac)   == clus, 0, ifelse(which.min(res$ICL_fac)   < clus, -1, 1))
return(evaluated)
}
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
ik <- 0
for(i in 1:144){
for(k in 1:50){
ik <- ik + 1
# browser()
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
load(file)
Overview[1, ] <- NA
res  <- vector(mode = "list", length = 1); res[[1]] <- Overview; names(res) <- "Overview" # This line used only so evaluation has correct input
eval <- evaluation(res = Overview, clus = design[i, "nclus"])
Results_final[ik, 1:13] <- unlist(eval)
}
}
evaluated
res
for(i in 1:144){
for(k in 1:50){
ik <- ik + 1
# browser()
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
load(file)
Overview[1, ] <- NA
res  <- vector(mode = "list", length = 1); res[[1]] <- Overview; names(res) <- "Overview" # This line used only so evaluation has correct input
eval <- evaluation(res = Overview, clus = design[i, "nclus"])
Results_final[ik, 1:13] <- unlist(eval)
}
}
res
res$Overview
evaluation <- function(res, clus){
# browser()
# Create the matrix to be returned
res           <- res$Overview
rmv.idx       <- which(colnames(res) %in% c("Clusters", "LL", "nrpar", "LL_fac", "nrpar_fac"))
evaluated     <- res[1, -rmv.idx, drop = F]
evaluated[, ] <- NA
evaluated     <- as.data.frame(evaluated)
res <- as.data.frame(res)
# Fill in the matrix: Does the selected model correspond with the true model?
# TRUE  = We matched the correct clustering
# Under = We under selected
# Over  = We over selected
evaluated$R2entropy <- res$R2entropy[[clus]]
evaluated$Chull <- ifelse(all(is.na(res$Chull)), NA, ifelse(which.max(res$Chull) == clus, 0, ifelse(which.min(res$Chull) < clus, -1, 1)))
evaluated$BIC_G <- ifelse(which.min(res$BIC_G) == clus, 0, ifelse(which.min(res$BIC_G) < clus, -1, 1))
evaluated$BIC_N <- ifelse(which.min(res$BIC_N) == clus, 0, ifelse(which.min(res$BIC_N) < clus, -1, 1))
evaluated$AIC   <- ifelse(which.min(res$AIC)   == clus, 0, ifelse(which.min(res$AIC)   < clus, -1, 1))
evaluated$AIC3  <- ifelse(which.min(res$AIC3)  == clus, 0, ifelse(which.min(res$AIC3)  < clus, -1, 1))
evaluated$ICL   <- ifelse(which.min(res$ICL)   == clus, 0, ifelse(which.min(res$ICL)   < clus, -1, 1))
evaluated$Chull_fac <- ifelse(all(is.na(res$Chull_fac)), NA, ifelse(which.max(res$Chull_fac) == clus, 0, ifelse(which.min(res$Chull_fac) < clus, -1, 1)))
evaluated$BIC_G_fac <- ifelse(which.min(res$BIC_G_fac) == clus, 0, ifelse(which.min(res$BIC_G_fac) < clus, -1, 1))
evaluated$BIC_N_fac <- ifelse(which.min(res$BIC_N_fac) == clus, 0, ifelse(which.min(res$BIC_N_fac) < clus, -1, 1))
evaluated$AIC_fac   <- ifelse(which.min(res$AIC_fac)   == clus, 0, ifelse(which.min(res$AIC_fac)   < clus, -1, 1))
evaluated$AIC3_fac  <- ifelse(which.min(res$AIC3_fac)  == clus, 0, ifelse(which.min(res$AIC3_fac)  < clus, -1, 1))
evaluated$ICL_fac   <- ifelse(which.min(res$ICL_fac)   == clus, 0, ifelse(which.min(res$ICL_fac)   < clus, -1, 1))
return(evaluated)
}
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
ik <- 0
for(i in 1:144){
for(k in 1:50){
ik <- ik + 1
# browser()
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
load(file)
Overview[1, ] <- NA
res  <- vector(mode = "list", length = 1); res[[1]] <- Overview; names(res) <- "Overview" # This line used only so evaluation has correct input
eval <- evaluation(res = res, clus = design[i, "nclus"])
Results_final[ik, 1:13] <- unlist(eval)
}
}
load("~/GitHub/ModelSelection_Simulation/Results/design.Rdata")
# Source evaluation
source("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/evaluation.R")
load("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Results/FinalResults.Rdata")
load("~/GitHub/ModelSelection_Simulation/Results/design.Rdata")
# Set working directory
setwd("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Results/Fit")
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
ik <- 0
for(i in 1:144){
for(k in 1:50){
ik <- ik + 1
# browser()
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
load(file)
Overview[1, ] <- NA
res  <- vector(mode = "list", length = 1); res[[1]] <- Overview; names(res) <- "Overview" # This line used only so evaluation has correct input
eval <- evaluation(res = res, clus = design[i, "nclus"])
Results_final[ik, 1:13] <- unlist(eval)
}
}
View(Results_final)
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
ik <- 0
for(i in 1:144){
for(k in 1:50){
ik <- ik + 1
# browser()
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
load(file)
Overview[1, ] <- NA
res  <- vector(mode = "list", length = 1); res[[1]] <- Overview; names(res) <- "Overview" # This line used only so evaluation has correct input
eval <- evaluation(res = res, clus = design[i, "nclus"])
Results_final[ik, 1:13] <- unlist(eval)
}
}
View(Results_final)
colnames(Results_final) <- c("Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac",
"Replication", "Condition")
# Merge datasets
design$Condition <- as.numeric(rownames(design))
Results_final <- merge(x = design, y = Results_final, by = "Condition")
col_order <- c("Condition", "Replication", "nclus", "ngroups", "coeff", "N_g", "balance", "sd",
"entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
Results_final <- Results_final[, col_order]
View(Results_final)
# Source evaluation
source("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/evaluation.R")
load("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Results/FinalResults.Rdata")
load("~/GitHub/ModelSelection_Simulation/Results/design.Rdata")
# Set working directory
setwd("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Results/Fit")
# Load and re-analyze the data considering only models from 2 to 6
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
ik <- 0
for(i in 1:144){
for(k in 1:50){
ik <- ik + 1
# browser()
file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
load(file)
Overview[1, ] <- NA
res  <- vector(mode = "list", length = 1); res[[1]] <- Overview; names(res) <- "Overview" # This line used only so evaluation has correct input
eval <- evaluation(res = res, clus = design[i, "nclus"])
Results_final[ik, 1:13] <- unlist(eval)
}
}
colnames(Results_final) <- c("Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac",
"Replication", "Condition")
View(Results_final)
save(Results_final, file = "FinalResults2ndBest.Rdata")
# Merge datasets
design$Condition <- as.numeric(rownames(design))
Results_final <- merge(x = design, y = Results_final, by = "Condition")
View(Results_final)
load("~/GitHub/ModelSelection_Simulation/Results/FinalResults2ndBest.Rdata")
View(Results_final)
View(design)
colnames(Results_final) <- c("R2Entropy",
"Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac",
"Replication", "Condition")
save(Results_final, file = "FinalResults2ndBest.Rdata")
# Merge datasets
design$Condition <- as.numeric(rownames(design))
Results_final <- merge(x = design, y = Results_final, by = "Condition")
col_order <- c("Condition", "Replication", "nclus", "ngroups", "coeff", "N_g", "balance", "sd",
"entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
Results_final <- Results_final[, col_order]
View(Results_final)
load("~/GitHub/ModelSelection_Simulation/Results/FinalResults2ndBest.Rdata")
colnames(Results_final) <- c("entropyR2",
"Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac",
"Replication", "Condition")
save(Results_final, file = "FinalResults2ndBest.Rdata")
# Merge datasets
design$Condition <- as.numeric(rownames(design))
Results_final <- merge(x = design, y = Results_final, by = "Condition")
col_order <- c("Condition", "Replication", "nclus", "ngroups", "coeff", "N_g", "balance", "sd",
"entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
Results_final <- Results_final[, col_order]
rm(col_order)
# Make the results factor
measures <- Results_final %>% dplyr::select(Chull:ICL_fac) %>% as.matrix() %>% as.data.frame()
measures <- lapply(X = measures, FUN = factor, levels = c("-1", "0", "1"), labels = c("Under", "Correct", "Over")) %>% as.data.frame()
Results_final[, 10:21] <- measures
Results_final[, "entropyR2"] <- as.numeric(Results_final[, "entropyR2"])
View(Results_final)
####################################################################################################
############################ TABLES - CLUSTER AND PARAMETER RECOVERY ###############################
####################################################################################################
# Check mean results per simulation factor
# Create a function for this
count_results <- function(data, by, type = "count"){
# Extract necessary columns
reduced <- data %>% dplyr::select(Chull:ICL_fac)
#Initialize objects to store
counted        <- vector(mode = "list", length = ncol(reduced))
names(counted) <- colnames(reduced)
final <- c()
# browser()
# Count per column
for(i in 1:ncol(reduced)){
if(length(by) == 1 && by == "total"){
counted[[i]] <- data %>% count(get(colnames(reduced)[i]), .drop = F) %>% filter(!is.na(`get(colnames(reduced)[i])`)) # Count and remove NA
if(type == "relative"){
counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]]), drop = F]/sum(counted[[i]][, ncol(counted[[i]]), drop = F]), 3)
}
# browser()
colnames(counted[[i]]) <- c("result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, 1, drop = F], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
} else {
# browser()
counted[[i]] <- data %>% group_by(across(all_of(by))) %>% count(get(colnames(reduced)[i]), .drop = F) %>% filter(!is.na(`get(colnames(reduced)[i])`)) # count per measure
# browser()
if(type == "relative"){
counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]])]/sum(counted[[i]][1:3, ncol(counted[[i]])]), 3)
}
colnames(counted[[i]]) <- c(by, "result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, c(seq_len(length(by)), (length(by) + 1))], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
}
}
return(final)
}
# Pre-check to know if there are NAs
colSums(apply(Results_final, 2, is.na))
# Main effects
count_results(data = Results_final, by = "total", type = "relative")
K_res   <- count_results(data = Results_final, by = c("nclus"), type = "relative")
N_res   <- count_results(data = Results_final, by = c("N_g"), type = "relative")
G_res   <- count_results(data = Results_final, by = c("ngroups"), type = "relative")
B_res   <- count_results(data = Results_final, by = c("coeff"), type = "relative")
Bal_res <- count_results(data = Results_final, by = c("balance"), type = "relative")
sd_res  <- count_results(data = Results_final, by = c("sd"), type = "relative")
K_res
