balance = "balanced", reliability = "high", NonInvSize = 0.2, NonInvItems = 2,
NonInvG = 0, NonInvType = "random", ResRange = 0.2, randomVarX = T)
source("~/GitHub/SE_sim/E_Step.R", echo=TRUE)
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20,
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20, est_method = "global",
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
model.comb
source("~/GitHub/MMG-SEM/MMG-SEM.R", echo=TRUE)
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20, est_method = "global",
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
fake
FakeprTbl
PT.MM
PT.MM
View(PT.MM)
View(FakeprTbl)
idx.par
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20, est_method = "global",
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
idx.par
!is.na(NA)
source("~/GitHub/MMG-SEM/MMG-SEM.R", echo=TRUE)
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20, est_method = "global",
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
idx.par
length(idx.par)
length(PT.MM$est
)
PT.MM$est
source("~/GitHub/MMG-SEM/MMG-SEM.R", echo=TRUE)
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20, est_method = "global",
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
View(FakeprTbl)
View(PT.MM)
PT.MM$est[1:length(idx.par)]
source("~/GitHub/MMG-SEM/MMG-SEM.R", echo=TRUE)
source("~/GitHub/MMG-SEM/MMG-SEM.R", echo=TRUE)
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20, est_method = "global",
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
View(FakeprTbl)
View(FakeprTbl)
View(FakeprTbl)
which(FakeprTbl$lhs != this_lv & FakeprTbl$op == "~~")
this_lv
endog
var_not_this_lv
which(FakeprTbl$lhs == this_lv)
FakeprTbl[c(which(FakeprTbl$lhs == this_lv), var_not_this_lv), ]
source("~/GitHub/MMG-SEM/MMG-SEM.R", echo=TRUE)
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20, est_method = "global",
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
prTbl_idx
sort(prTbl_idx)
View(FakeprTbl[prTbl_idx, ])
source("~/GitHub/MMG-SEM/MMG-SEM.R", echo=TRUE)
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20, est_method = "local",
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
prTbl_lv
View(prTbl_lv)
View(fake_lv[[1]])
View(partable(fake_lv[[2]]))
source("~/GitHub/MMG-SEM/MMG-SEM.R", echo=TRUE)
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20, est_method = "global",
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
View(partable(fake_lv))
View(partable(fake_lv[[1]]))
View(partable(fake_lv[[2]]))
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20, est_method = "global",
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
cov_eta
reorder(cov_eta[[x]])
ngroups
1:ngroups
lapply(1:ngroups, function(x) {
reorder(cov_eta[[x]])
})
exog
source("~/GitHub/MMG-SEM/MMG-SEM.R", echo=TRUE)
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20, est_method = "global",
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
cov_eta
lambda_gs
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20, est_method = "global",
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
lambda_gs
strsplit(unlist(step1model), "\n")
unlist(strsplit(unlist(step1model), "\n"))
exog
exog[i]
c(rewritten, lines_model[grepl(exog[i], lines_model)])
endog1
source("~/GitHub/MMG-SEM/MMG-SEM.R", echo=TRUE)
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20, est_method = "global",
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
fake
lavNames(fake, "ov.y")
source("~/GitHub/MMG-SEM/MMG-SEM.R", echo=TRUE)
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20, est_method = "global",
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
lat_var
endog1
endog2
exog
source("~/GitHub/MMG-SEM/MMG-SEM.R", echo=TRUE)
res <- MMGSEM(dat = Data$SimData, step1model = Measur_model, step2model = Struc_model,
group = "group", nclus = 2, nstarts = 20, est_method = "global",
printing = F, partition = "hard", NonInv = NonInv, seed = 1,
allG = T, fit = "factors")
getwd()
3200 * 12
3200 * 14
44800 + 4500
44800 + 4500 + 1000
285*0.25
380/2
190-127.5
140*7
load("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Results/Fit/FitRow1Rep3-1.Rdata")
3147.37 - 21.40 - 25 - 213.75 - 224.75
3147.37 - 213.75
2933.62 - 154 - 150
14+13+10+6.5
3226*14
3*3*3*2*2*2*3*2
3*3*3*2*2*2*3*3
1944*50
1296*50
library(readxl)
data <- read_excel("C:/Users/User/Desktop/Juan/ACCReS01.xlsx")
View(data)
library(dplyr)
library(lavaan)
# Specify model
model <- "
ECP =~ ACCReS_1 + ACCReS_2 + ACCReS_3 + ACCReS_4 + ACCReS_5 + ACCReS_6 + ACCReS_7 + ACCReS_9 + ACCReS_10 + ACCReS_11 + ACCReS_12 + ACCReS_13 + ACCReS_14 + ACCReS_15 + ACCReS_16 + ACCReS_18 + ACCReS_19 + ACCReS_21 + ACCReS_22
AIS =~ ACCReS_8 + ACCReS_17 + ACCReS_20 + ACCReS_23 + ACCReS_24 + ACCReS_25 + ACCReS_26 + ACCReS_27 + + ACCReS_28 + ACCReS_29 + ACCReS_30 + ACCReS_31 + ACCReS_32 + ACCReS_33 + ACCReS_34 + ACCReS_35 + ACCReS_36 + ACCReS_37
"
?as.ordered
# Run CFA
fit.CFA <- lavaan::cfa(model, data = data)
# Check estimates
summary(fit.CFA)
# Check fit measures
fitmeasures(fit.CFA)
# Check fit measures
fitmeasures(fit.CFA)[c("cfi", "rmsea")]
# Transform to factor (?)
data <- data %>% mutate(across(where(is.numeric), as.ordered))
# Run CFA
fit.CFA <- lavaan::cfa(model, data = data)
# Check estimates
summary(fit.CFA)
# Run CFA
fit.CFA <- lavaan::cfa(model, data = data, fitmeasures = T)
# Check estimates
summary(fit.CFA, fitmeasures = T)
# Check estimates
summary(fit.CFA, fit.measures = T)
# Check fit measures
fitmeasures(fit.CFA)[c("cfi", "rmsea")]
apply(data, 2, qqplot)
apply(data, 2, qqnorm)
qqnorm(data$ACCReS_1)
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
y <- rt(200, df = 5)
qqnorm(y)
qqnorm(data$ACCReS_1)
# Load data
data <- read_excel("C:/Users/User/Desktop/Juan/ACCReS01.xlsx")
# Transform to factor (?)
data <- data %>% mutate(across(where(is.numeric), as.ordered))
# Specify model
model <- "
ECP =~ ACCReS_1 + ACCReS_2 + ACCReS_3 + ACCReS_4 + ACCReS_5 + ACCReS_6 + ACCReS_7 + ACCReS_9 + ACCReS_10 + ACCReS_11 + ACCReS_12 + ACCReS_13 + ACCReS_14 + ACCReS_15 + ACCReS_16 + ACCReS_18 + ACCReS_19 + ACCReS_21 + ACCReS_22
AIS =~ ACCReS_8 + ACCReS_17 + ACCReS_20 + ACCReS_23 + ACCReS_24 + ACCReS_25 + ACCReS_26 + ACCReS_27 + + ACCReS_28 + ACCReS_29 + ACCReS_30 + ACCReS_31 + ACCReS_32 + ACCReS_33 + ACCReS_34 + ACCReS_35 + ACCReS_36 + ACCReS_37
"
# Run CFA
fit.CFA <- lavaan::cfa(model, data = data)
# Load data
data <- read_excel("C:/Users/User/Desktop/Juan/ACCReS01.xlsx")
apply(data, 2, qqnorm)
apply(data, 2, qqline)
apply(data, 2, shapiro.test)
# Transform to factor (?)
data <- data %>% mutate(across(where(is.numeric), as.ordered))
# Specify model
model <- "
ECP =~ ACCReS_1 + ACCReS_2 + ACCReS_3 + ACCReS_4 + ACCReS_5 + ACCReS_6 + ACCReS_7 + ACCReS_9 + ACCReS_10 + ACCReS_11 + ACCReS_12 + ACCReS_13 + ACCReS_14 + ACCReS_15 + ACCReS_16 + ACCReS_18 + ACCReS_19 + ACCReS_21 + ACCReS_22
AIS =~ ACCReS_8 + ACCReS_17 + ACCReS_20 + ACCReS_23 + ACCReS_24 + ACCReS_25 + ACCReS_26 + ACCReS_27 + + ACCReS_28 + ACCReS_29 + ACCReS_30 + ACCReS_31 + ACCReS_32 + ACCReS_33 + ACCReS_34 + ACCReS_35 + ACCReS_36 + ACCReS_37
"
# Run CFA
fit.CFA <- lavaan::cfa(model, data = data)
# Check estimates
summary(fit.CFA, fit.measures = T)
# Run CFA
fit.CFA <- lavaan::cfa(model, data = data, ordered = T)
# Check estimates
summary(fit.CFA, fit.measures = T)
# Check fit measures
fitmeasures(fit.CFA)[c("cfi", "rmsea")]
# Run CFA
fit.CFA <- lavaan::cfa(model, data = data, ordered = T)
# Check estimates
summary(fit.CFA, fit.measures = T)
# Check fit measures
fitmeasures(fit.CFA)[c("cfi", "rmsea")]
fitmeasures(fit.CFA)
# Load data
data <- read_excel("C:/Users/User/Desktop/Juan/ACCReS01.xlsx")
# Specify model
model <- "
ECP =~ ACCReS_1 + ACCReS_2 + ACCReS_3 + ACCReS_4 + ACCReS_5 + ACCReS_6 + ACCReS_7 + ACCReS_9 + ACCReS_10 + ACCReS_11 + ACCReS_12 + ACCReS_13 + ACCReS_14 + ACCReS_15 + ACCReS_16 + ACCReS_18 + ACCReS_19 + ACCReS_21 + ACCReS_22
AIS =~ ACCReS_8 + ACCReS_17 + ACCReS_20 + ACCReS_23 + ACCReS_24 + ACCReS_25 + ACCReS_26 + ACCReS_27 + + ACCReS_28 + ACCReS_29 + ACCReS_30 + ACCReS_31 + ACCReS_32 + ACCReS_33 + ACCReS_34 + ACCReS_35 + ACCReS_36 + ACCReS_37
"
# Run CFA
fit.CFA <- lavaan::cfa(model, data = data)#, ordered = T)
# Check estimates
summary(fit.CFA, fit.measures = T)
# Transform to factor (?)
data <- data %>% mutate(across(where(is.numeric), as.ordered))
# Specify model
model <- "
ECP =~ ACCReS_1 + ACCReS_2 + ACCReS_3 + ACCReS_4 + ACCReS_5 + ACCReS_6 + ACCReS_7 + ACCReS_9 + ACCReS_10 + ACCReS_11 + ACCReS_12 + ACCReS_13 + ACCReS_14 + ACCReS_15 + ACCReS_16 + ACCReS_18 + ACCReS_19 + ACCReS_21 + ACCReS_22
AIS =~ ACCReS_8 + ACCReS_17 + ACCReS_20 + ACCReS_23 + ACCReS_24 + ACCReS_25 + ACCReS_26 + ACCReS_27 + + ACCReS_28 + ACCReS_29 + ACCReS_30 + ACCReS_31 + ACCReS_32 + ACCReS_33 + ACCReS_34 + ACCReS_35 + ACCReS_36 + ACCReS_37
"
model <- "
ECP =~ ACCReS_1 + ACCReS_2 + ACCReS_3 + ACCReS_4 + ACCReS_5 + ACCReS_6 + ACCReS_7 + ACCReS_9 + ACCReS_10 + ACCReS_11 + ACCReS_12 + ACCReS_13 + ACCReS_14 + ACCReS_15 + ACCReS_16 + ACCReS_18 + ACCReS_19 + ACCReS_21 + ACCReS_22
AIS =~ ACCReS_8 + ACCReS_17 + ACCReS_20 + ACCReS_23 + ACCReS_24 + ACCReS_25 + ACCReS_26 + ACCReS_27 + + ACCReS_28 + ACCReS_30 + ACCReS_31 + ACCReS_32 + ACCReS_33 + ACCReS_35 + ACCReS_36 + ACCReS_37
"
# Run CFA
fit.CFA <- lavaan::cfa(model, data = data, ordered = T)
# Check estimates
summary(fit.CFA, fit.measures = T)
# Load data
data <- read_excel("C:/Users/User/Desktop/Juan/ACCReS01.xlsx")
model <- "
ECP =~ ACCReS_1 + ACCReS_2 + ACCReS_3 + ACCReS_4 + ACCReS_5 + ACCReS_6 + ACCReS_7 + ACCReS_9 + ACCReS_10 + ACCReS_11 + ACCReS_12 + ACCReS_13 + ACCReS_14 + ACCReS_15 + ACCReS_16 + ACCReS_18 + ACCReS_19 + ACCReS_21 + ACCReS_22
AIS =~ ACCReS_8 + ACCReS_17 + ACCReS_20 + ACCReS_23 + ACCReS_24 + ACCReS_25 + ACCReS_26 + ACCReS_27 + + ACCReS_28 + ACCReS_30 + ACCReS_31 + ACCReS_32 + ACCReS_33 + ACCReS_35 + ACCReS_36 + ACCReS_37
"
# Run CFA
fit.CFA <- lavaan::cfa(model, data = data)#, ordered = T)
# Check estimates
summary(fit.CFA, fit.measures = T)
# Check fit measures
fitmeasures(fit.CFA)[c("cfi", "rmsea")]
model <- "
ECP =~ ACCReS_1 + ACCReS_2 + ACCReS_3 + ACCReS_4 + ACCReS_5 + ACCReS_6 + ACCReS_7 + ACCReS_9 + ACCReS_10 + ACCReS_11 + ACCReS_12 + ACCReS_13 + ACCReS_14 + ACCReS_15 + ACCReS_16 + ACCReS_18 + ACCReS_19 + ACCReS_21 + ACCReS_22
AIS =~ ACCReS_8 + ACCReS_17 + ACCReS_20 + ACCReS_23 + ACCReS_24 + ACCReS_25 + ACCReS_26 + ACCReS_27 + ACCReS_28 + ACCReS_30 + ACCReS_31 + ACCReS_32 + ACCReS_33 + ACCReS_35 + ACCReS_36 + ACCReS_37
"
# Run CFA
fit.CFA <- lavaan::cfa(model, data = data)#, ordered = T)
# Check estimates
summary(fit.CFA, fit.measures = T)
# Load data
data <- read_excel("C:/Users/User/Desktop/Juan/ACCReS01.xlsx")
# Transform to factor (?)
data <- data %>% mutate(across(where(is.numeric), as.ordered))
# Run CFA
fit.CFA <- lavaan::cfa(model, data = data, ordered = T)
# Check estimates
summary(fit.CFA, fit.measures = T)
# Load data
data <- read_excel("C:/Users/User/Desktop/Juan/ACCReS01.xlsx")
#CFA
model <- "SP =~ ACCReS_3 + ACCReS_4 + ACCReS_5 + ACCReS_6 + ACCReS_9 + ACCReS_11 + ACCReS_12 + ACCReS_13 + ACCReS_14 + ACCReS_15 + ACCReS_16 + ACCReS_18 + ACCReS_19
AIS =~ ACCReS_17 + ACCReS_23 + ACCReS_24 + ACCReS_25 + ACCReS_30 + ACCReS_31 + ACCReS_32 + ACCReS_33 + ACCReS_34 + ACCReS_35 + ACCReS_36 + ACCReS_37
CCC =~ ACCReS_1 + ACCReS_2 + ACCReS_7 + ACCReS_8 + ACCReS_10 + ACCReS_20 + ACCReS_21 + ACCReS_22 + ACCReS_26 + ACCReS_27 + ACCReS_28 + ACCReS_29"
mydata <- data %>%
mutate(across(where(is.numeric), as.ordered)) #declarar las variables como ordered factor
threefac37itemsa <- cfa(model,data=mydata)
summary(threefac37itemsa,fit.measures=TRUE)
#CFA
model <- "SP =~ ACCReS_3 + ACCReS_4 + ACCReS_5 + ACCReS_6 + ACCReS_9 + ACCReS_11 + ACCReS_12 + ACCReS_13 + ACCReS_14 + ACCReS_15 + ACCReS_16 + ACCReS_18 + ACCReS_19
AIS =~ ACCReS_17 + ACCReS_23 + ACCReS_24 + ACCReS_25 + ACCReS_30 + ACCReS_31 + ACCReS_32 + ACCReS_33 + ACCReS_34 + ACCReS_35 + ACCReS_36 + ACCReS_37
"
threefac37itemsa <- cfa(model,data=mydata)
summary(threefac37itemsa,fit.measures=TRUE)
fitmeasures(threefac37itemsa)["rmsea"]
#CFA
model <- "SP =~ ACCReS_3 + ACCReS_4 + ACCReS_5 + ACCReS_6 + ACCReS_9 + ACCReS_11 + ACCReS_12 + ACCReS_13 + ACCReS_14 + ACCReS_15 + ACCReS_16 + ACCReS_18 + ACCReS_19
AIS =~ ACCReS_17 + ACCReS_23 + ACCReS_24 + ACCReS_25 + ACCReS_30 + ACCReS_31 + ACCReS_32 + ACCReS_33 + ACCReS_34 + ACCReS_35 + ACCReS_36 + ACCReS_37
CCC =~ ACCReS_1 + ACCReS_2 + ACCReS_7 + ACCReS_8 + ACCReS_10 + ACCReS_20 + ACCReS_21 + ACCReS_22 + ACCReS_26 + ACCReS_27 + ACCReS_28 + ACCReS_29"
threefac37itemsa <- cfa(model,data=mydata)
summary(threefac37itemsa,fit.measures=TRUE)
20*round(100/10) # generate 'nruns'*(100/preselect) different random partitions
matrix(0,20,6)
IM <- diag(2)
IM
IM[c(1,2,1,2,1,2)]
replicate(6, sample(x = c(rep(0, (2 - 1)), 1)))
replicate(6, sample(x = c(rep(0, (2 - 1)), 1)))
replicate(6, sample(x = c(rep(0, (2 - 1)), 1)))
replicate(6, sample(x = c(rep(0, (2 - 1)), 1)))
replicate(6, sample(x = c(rep(0, (2 - 1)), 1)))
replicate(6, sample(x = c(rep(0, (2 - 1)), 1)))
replicate(6, sample(x = c(rep(0, (2 - 1)), 1)))
min(0,1)
t(replicate(ngroups, sample(x = c(rep(0, (nclus - 1)), 1))))
t(replicate(6, sample(x = c(rep(0, (2 - 1)), 1))))
sample(x = c(rep(0, (2 - 1)), 1))
rep(0, (nclus - 1))
rep(0, (4 - 1))
sample(x = c(rep(0, (nclus - 1)), 1))
sample(x = c(rep(0, (4 - 1)), 1))
sample(x = c(rep(0, (2 - 1)), 1))
sample(x = c(rep(0, (6 - 1)), 1))
sample(x = c(rep(0, (1 - 1)), 1))
rep(0, (1 - 1))
sample(x = c(rep(0, (1 - 1)), 1))
sample(x = c(rep(0, (4 - 1)), 1))
sample(x = c(rep(0, (4 - 1)), 1))
sample(x = c(rep(0, (4 - 1)), 1))
sample(x = c(rep(0, (4 - 1)), 1))
sample(x = c(rep(0, (4 - 1)), 1))
sample(x = c(rep(0, (4 - 1)), 1))
sample(x = c(rep(0, (4 - 1)), 1))
sample(x = c(rep(0, (4 - 1)), 1))
sample(x = c(rep(0, (4 - 1)), 1))
sample(x = c(rep(0, (4 - 1)), 1))
sample(x = c(rep(0, (4 - 1)), 1))
replicate(6, sample(x = c(rep(0, (2 - 1)), 1)))
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
library(lavaan)
# Simulation Design
# Which factors are going to be tested? For now:
nclus   <- c(2, 4)         # Number of clusters
ngroups <- c(24, 48)       # Number of groups
coeff   <- c(0.3, 0.4)     # Initial regression parameters
N_g     <- c(50, 100, 200) # Sample size per groups
balance <- c("bal", "unb") # Cluster size
sd      <- c(0, 0.05, 0.1) # Differences within a cluster (in betas)
# reliability <- c("low")
# NonInvSize <- c(0.6)
# ResRange <- 0.2
# NonInvItems <- 2
# NonInvG <- c(0.50)
# NonInvType <- c("fixed")
model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
S1 <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
'
S2 <- '
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
# Get design matrix
design <- expand.grid(nclus, ngroups, coeff, N_g, balance, sd, model) # , reliability, NonInvSize, ResRange,
# NonInvItems, NonInvG, NonInvType)
colnames(design) <- c("nclus", "ngroups", "coeff", "N_g", "balance", "sd", "model")
# "reliability", "NonInvSize", "ResRange", "NonInvItems", "NonInvG", "NonInvType")
rownames(design) <- NULL
rm(balance, coeff, N_g, nclus, ngroups, sd) #, NonInvG, NonInvItems, NonInvSize, reliability, ResRange)
SimData <- DataGeneration(model      = model,
step1model = S1,
nclus      = design[1, "nclus"],
ngroups    = design[1, "ngroups"],
reg_coeff  = design[1, "coeff"],
N_g        = design[1, "N_g"],
balance    = design[1, "balance"],
sd         = design[1, "sd"])
traceback()
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
SimData <- DataGeneration(model      = model,
step1model = S1,
nclus      = design[1, "nclus"],
ngroups    = design[1, "ngroups"],
reg_coeff  = design[1, "coeff"],
N_g        = design[1, "N_g"],
balance    = design[1, "balance"],
sd         = design[1, "sd"])
psi_gk[[g, k]]
psi_gk[[g, k]]
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
SimData <- DataGeneration(model      = model,
step1model = S1,
nclus      = design[1, "nclus"],
ngroups    = design[1, "ngroups"],
reg_coeff  = design[1, "coeff"],
N_g        = design[1, "N_g"],
balance    = design[1, "balance"],
sd         = design[1, "sd"])
psi_gk
psi_gk[[1,1]]
LambdaNonInv
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
SimData <- DataGeneration(model      = model,
step1model = S1,
nclus      = design[1, "nclus"],
ngroups    = design[1, "ngroups"],
reg_coeff  = design[1, "coeff"],
N_g        = design[1, "N_g"],
balance    = design[1, "balance"],
sd         = design[1, "sd"])
LambdaNonInv
SimData
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
SimData <- DataGeneration(model      = model,
step1model = S1,
nclus      = design[1, "nclus"],
ngroups    = design[1, "ngroups"],
reg_coeff  = design[1, "coeff"],
N_g        = design[1, "N_g"],
balance    = design[1, "balance"],
sd         = design[1, "sd"])
ngroups
N_gs
lambda_gs
theta_gs
pi_ks
z_gks
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
SimData <- DataGeneration(model      = model,
step1model = S1,
nclus      = design[1, "nclus"],
ngroups    = design[1, "ngroups"],
reg_coeff  = design[1, "coeff"],
N_g        = design[1, "N_g"],
balance    = design[1, "balance"],
sd         = design[1, "sd"])
cov_eta_es
cov_eta_es$1
cov_eta_es$`1`
cov_eta$`1`
cov_eta
cov_eta$`1`
cov_eta_es$`1`
cov_eta[,,1]
Sigma[[g, k]]
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
SimData <- DataGeneration(model      = model,
step1model = S1,
nclus      = design[1, "nclus"],
ngroups    = 12,
reg_coeff  = design[1, "coeff"],
N_g        = design[1, "N_g"],
balance    = design[1, "balance"],
sd         = design[1, "sd"])
EStep(
pi_ks = pi_ks, ngroup = ngroups,
nclus = nclus, loglik = loglik_gks
)
entropy.R2(pi = pi_ks, post = z_gks)
load("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Results/ResultRowARI1.Rdata")
View(ResultsRowARI)
load("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Results/ResultRow1.Rdata")
View(ResultsRow)
load("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Results/Fit/FitRow1Rep1-1.Rdata")
View(Overview)
library(lavaan)
library(qwraps2)
library(fpp3)
library(dplyr)
library(xtable)
library(ggpubr)
library(ggplot2)
library(ggthemes)
# library(Cairo)
setwd("~/GitHub/ModelSelection_Simulation")
setwd("~/GitHub/ModelSelection_Simulation/Results")
# Load empty final results matrix
load("FinalResults.Rdata")
load("C:/Users/User/Documents/GitHub/ModelSelection_Simulation/Results/ResultRow1.Rdata")
View(ResultsRow)
