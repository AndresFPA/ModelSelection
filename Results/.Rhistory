# Lavaan continuous
model.sem.con  <- sem(model = model, data = Data, ordered = F, std.lv = F)
# summary(model.sem.con)
lavInspect(model.sem.con, what = "est")$beta
# cov(fs)
#
# str.model <- '
#   F1 ~ F2 + F3
# '
#
# str.fit <- sem(model = str.model, sample.cov = cov(fs), sample.nobs = 500, sample.mean = colMeans(fs))
# summary(str.fit)
# SINGLE INDICATOR
fs <- fscores(model.mirt, full.scores.SE = T)
fs <- as.data.frame(fs)
fs <- within(fs, {
evar_f1 = SE_F1^1 * (1 - SE_F1)
evar_f2 = SE_F2^1 * (1 - SE_F2)
evar_f3 = SE_F3^1 * (1 - SE_F3)
ld_f1   = 1 - SE_F1
ld_f2   = 1 - SE_F2
ld_f3   = 1 - SE_F3
})
fixed_values <- colMeans(fs)
str.model <- '
eta1 =~ F1
eta2 =~ F2
eta3 =~ F3
eta1 ~ eta2 + eta3
'
str.fit <- cfa(model = str.model, data = fs, std.lv = T, se = "none")
# Adequate par table and fix values
par_table <- parTable(str.fit)
par_table$est <- NULL
par_table$start <- NULL
# Which values are freely estimated?
par_table$free <- 0
par_table$free[par_table$op == "~"] <- 1:sum(par_table$op == "~")
par_table$free[12] <- 3
# Fix values of loadings and error variances
# Loadings
par_table$ustart[1] <- fixed_values["ld_f1"]
par_table$ustart[2] <- fixed_values["ld_f2"]
par_table$ustart[3] <- fixed_values["ld_f3"]
# Error variances
par_table$ustart[6] <- fixed_values["evar_f1"]
par_table$ustart[7] <- fixed_values["evar_f2"]
par_table$ustart[8] <- fixed_values["evar_f3"]
# par_table$free[4] <- 0
# par_table$ustart[4] <- 0.3
# par_table$free[12] <- 0
# par_table$ustart[12] <- 0.5
str.final <- cfa(model = par_table, data = fs, std.lv = T, se = "none")
# summary(str.final)
lavInspect(str.final, what = "est")$beta
185/214
196/243
# Generate data
cov_F3F2 <- diag(0.5, 2)
cov_F3F2
library(MASS)
# Generate factor scores
# F2 and F3
FS <- mvrnorm(n = N, mu = rep(0, 2), Sigma = cov_F3F2, empirical = T)
# Define relevant variables
N   <- 1000
# Generate factor scores
# F2 and F3
FS <- mvrnorm(n = N, mu = rep(0, 2), Sigma = cov_F3F2, empirical = T)
View(cov_F3F2)
View(FS)
colnames(FS) <- c("F2", "F3")
FS <- as.data.frame(FS)
(FS$F2*0.3) + (FS$F3*0.3)
var((FS$F2*0.3) + (FS$F3*0.3))
# F1
F1 <- (FS$F2*0.3) + (FS$F3*0.3) + rnorm(n = N, mean = 0, sd = 0.05)
# Complete FS
FS <- cbind(F1, FS)
FS
head(FS)
diag(9)
rownames(lambda) <- paste0(rep("x", 9), 1:9)
# Lambda
load <- 0.7
sload <- sqrt(load)
lambda <- matrix(c(1,     0,     0,
sload, 0,     0,
sload, 0,     0,
0,     1,     0,
0,     sload, 0,
0,     sload, 0,
0,     0,     1,
0,     0,     sload,
0,     0,     sload), byrow = T, ncol = 3)
rownames(lambda) <- paste0(rep("x", 9), 1:9)
colnames(lambda) <- colnames(FS)
# Theta
theta <- diag(9)
theta[theta != 0] <- rnorm(9, mean = (1 - load), sd = 0.1)
epsilon <- mvrnorm(n = N, mu = rep(0,9), Sigma = theta)
View(epsilon)
View(theta)
x1 <- lambda["x1", "F1"]*FS$F1 + epsilon[, "x1"]
epsilon
x1 <- lambda["x1", "F1"]*FS$F1 + epsilon[, 1]
x2 <- lambda["x2", "F1"]*FS$F1 + epsilon[, 2]
x3 <- lambda["x3", "F1"]*FS$F1 + epsilon[, 3]
x4 <- lambda["x4", "F2"]*FS$F2 + epsilon[, 4]
x5 <- lambda["x5", "F1"]*FS$F2 + epsilon[, 5]
x6 <- lambda["x6", "F1"]*FS$F2 + epsilon[, 6]
x7 <- lambda["x7", "F1"]*FS$F3 + epsilon[, 7]
x8 <- lambda["x8", "F1"]*FS$F3 + epsilon[, 8]
x9 <- lambda["x9", "F1"]*FS$F3 + epsilon[, 9]
ContData <- cbind(x1, x2, x3,
x4, x5, x6,
x7, x8, x9)
View(ContData)
##################
# Run continuous model
# Check lavaan cont
model <- "f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 + x6
f3 =~ x7 + x8 + x9
f1 ~ f2 + f3"
model.sem  <- sem(model = model, data = ContData, ordered = F, std.lv = F)
library(lavaan)
library(mirt)
library(dplyr)
model.sem  <- sem(model = model, data = ContData, ordered = F, std.lv = F)
x1 <- lambda["x1", "F1"]*FS$F1 + epsilon[, 1]
x2 <- lambda["x2", "F1"]*FS$F1 + epsilon[, 2]
x3 <- lambda["x3", "F1"]*FS$F1 + epsilon[, 3]
x4 <- lambda["x4", "F2"]*FS$F2 + epsilon[, 4]
x5 <- lambda["x5", "F2"]*FS$F2 + epsilon[, 5]
x6 <- lambda["x6", "F2"]*FS$F2 + epsilon[, 6]
x7 <- lambda["x7", "F3"]*FS$F3 + epsilon[, 7]
x8 <- lambda["x8", "F3"]*FS$F3 + epsilon[, 8]
x9 <- lambda["x9", "F3"]*FS$F3 + epsilon[, 9]
ContData <- cbind(x1, x2, x3,
x4, x5, x6,
x7, x8, x9)
##################
# Run continuous model
# Check lavaan cont
model <- "f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 + x6
f3 =~ x7 + x8 + x9
f1 ~ f2 + f3"
model.sem  <- sem(model = model, data = ContData, ordered = F, std.lv = F)
summary(model.sem, rsquare = T)
library(lavaan)
library(mirt)
library(dplyr)
library(MASS)
# Data Generation
# set.seed(5)
# Define relevant variables
N   <- 1000
###################################
# Generate data
cov_F3F2 <- matrix(data = c(1, 0.5,
0.5, 1), nrow = 2, byrow = T)
#################
# Generate factor scores
# F2 and F3
FS <- mvrnorm(n = N, mu = rep(0, 2), Sigma = cov_F3F2, empirical = T)
colnames(FS) <- c("F2", "F3")
FS <- as.data.frame(FS)
# F1
F1 <- (FS$F2*0.3) + (FS$F3*0.3) + rnorm(n = N, mean = 0, sd = 0.05)
# Complete FS
FS <- cbind(F1, FS)
#################
# MM
# Lambda
load <- 0.7
sload <- sqrt(load)
lambda <- matrix(c(1,     0,     0,
sload, 0,     0,
sload, 0,     0,
0,     1,     0,
0,     sload, 0,
0,     sload, 0,
0,     0,     1,
0,     0,     sload,
0,     0,     sload), byrow = T, ncol = 3)
rownames(lambda) <- paste0(rep("x", 9), 1:9)
colnames(lambda) <- colnames(FS)
# Theta
theta <- diag(9)
theta[theta != 0] <- rnorm(9, mean = (1 - load), sd = 0.1)
epsilon <- mvrnorm(n = N, mu = rep(0,9), Sigma = theta)
###################
# Observed data (?) Confusing (latent response?)
x1 <- lambda["x1", "F1"]*FS$F1 + epsilon[, 1]
x2 <- lambda["x2", "F1"]*FS$F1 + epsilon[, 2]
x3 <- lambda["x3", "F1"]*FS$F1 + epsilon[, 3]
x4 <- lambda["x4", "F2"]*FS$F2 + epsilon[, 4]
x5 <- lambda["x5", "F2"]*FS$F2 + epsilon[, 5]
x6 <- lambda["x6", "F2"]*FS$F2 + epsilon[, 6]
x7 <- lambda["x7", "F3"]*FS$F3 + epsilon[, 7]
x8 <- lambda["x8", "F3"]*FS$F3 + epsilon[, 8]
x9 <- lambda["x9", "F3"]*FS$F3 + epsilon[, 9]
ContData <- cbind(x1, x2, x3,
x4, x5, x6,
x7, x8, x9)
##################
# Run continuous model
# Check lavaan cont
model <- "f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 + x6
f3 =~ x7 + x8 + x9
f1 ~ f2 + f3"
model.sem  <- sem(model = model, data = ContData, ordered = F, std.lv = F)
summary(model.sem, rsquare = T)
cor(Data)
library(lavaan)
library(mirt)
library(dplyr)
library(MASS)
# Data Generation
# set.seed(5)
# Define relevant variables
N   <- 1000
###################################
# Generate data
cov_F3F2 <- matrix(data = c(1, 0.5,
0.5, 1), nrow = 2, byrow = T)
#################
# Generate factor scores
# F2 and F3
FS <- mvrnorm(n = N, mu = rep(0, 2), Sigma = cov_F3F2, empirical = T)
colnames(FS) <- c("F2", "F3")
FS <- as.data.frame(FS)
# F1
F1 <- (FS$F2*0.3) + (FS$F3*0.3) + rnorm(n = N, mean = 0, sd = 0.7)
# Complete FS
FS <- cbind(F1, FS)
#################
# MM
# Lambda
load <- 0.7
sload <- sqrt(load)
lambda <- matrix(c(1,     0,     0,
sload, 0,     0,
sload, 0,     0,
0,     1,     0,
0,     sload, 0,
0,     sload, 0,
0,     0,     1,
0,     0,     sload,
0,     0,     sload), byrow = T, ncol = 3)
rownames(lambda) <- paste0(rep("x", 9), 1:9)
colnames(lambda) <- colnames(FS)
# Theta
theta <- diag(9)
theta[theta != 0] <- rnorm(9, mean = (1 - load), sd = 0.1)
epsilon <- mvrnorm(n = N, mu = rep(0,9), Sigma = theta)
###################
# Observed data (?) Confusing (latent response?)
x1 <- lambda["x1", "F1"]*FS$F1 + epsilon[, 1]
x2 <- lambda["x2", "F1"]*FS$F1 + epsilon[, 2]
x3 <- lambda["x3", "F1"]*FS$F1 + epsilon[, 3]
x4 <- lambda["x4", "F2"]*FS$F2 + epsilon[, 4]
x5 <- lambda["x5", "F2"]*FS$F2 + epsilon[, 5]
x6 <- lambda["x6", "F2"]*FS$F2 + epsilon[, 6]
x7 <- lambda["x7", "F3"]*FS$F3 + epsilon[, 7]
x8 <- lambda["x8", "F3"]*FS$F3 + epsilon[, 8]
x9 <- lambda["x9", "F3"]*FS$F3 + epsilon[, 9]
ContData <- cbind(x1, x2, x3,
x4, x5, x6,
x7, x8, x9)
##################
# Run continuous model
# Check lavaan cont
model <- "f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 + x6
f3 =~ x7 + x8 + x9
f1 ~ f2 + f3"
model.sem  <- sem(model = model, data = ContData, ordered = F, std.lv = F)
summary(model.sem, rsquare = T)
cor(Data)
###################################
# Generate data
#################
# Generate factor scores
beta <- matrix(c(0, 0.3, 0.3,
0, 0,   0  ,
0, 0,   0  ), byrow = T, ncol = 3)
psi  <- matrix(c(1, 0,   0,
0, 1,   0.5,
0, 0.5, 1), byrow = T, ncol = 3)
I <- diag(3)
phi <- solve(I - beta) %*% psi %*% solve(t(I - beta))
FS <- as.data.frame(mvrnorm(n = N, mu = rep(0, 3), Sigma = phi, empirical = T)) # These are factor scores
colnames(FS) <- c("F1", "F2", "F3")
library(mirt)
library(dplyr)
library(MASS)
# Data Generation
# set.seed(5)
# Define relevant variables
N   <- 1000
###################################
# Generate data
#################
# Generate factor scores
beta <- matrix(c(0, 0.3, 0.3,
0, 0,   0  ,
0, 0,   0  ), byrow = T, ncol = 3)
psi  <- matrix(c(1, 0,   0,
0, 1,   0.5,
0, 0.5, 1), byrow = T, ncol = 3)
I <- diag(3)
phi <- solve(I - beta) %*% psi %*% solve(t(I - beta))
FS <- as.data.frame(mvrnorm(n = N, mu = rep(0, 3), Sigma = phi, empirical = T)) # These are factor scores
colnames(FS) <- c("F1", "F2", "F3")
#################
# MM
# Lambda
load <- 0.7
sload <- sqrt(load)
lambda <- matrix(c(1,     0,     0,
sload, 0,     0,
sload, 0,     0,
0,     1,     0,
0,     sload, 0,
0,     sload, 0,
0,     0,     1,
0,     0,     sload,
0,     0,     sload), byrow = T, ncol = 3)
rownames(lambda) <- paste0(rep("x", 9), 1:9)
colnames(lambda) <- colnames(FS)
# Theta
theta <- diag(9)
theta[theta != 0] <- rnorm(9, mean = (1 - load), sd = 0.1)
epsilon <- mvrnorm(n = N, mu = rep(0,9), Sigma = theta)
###################
# Observed data (?) Confusing (latent response?)
x1 <- lambda["x1", "F1"]*FS$F1 + epsilon[, 1]
x2 <- lambda["x2", "F1"]*FS$F1 + epsilon[, 2]
x3 <- lambda["x3", "F1"]*FS$F1 + epsilon[, 3]
x4 <- lambda["x4", "F2"]*FS$F2 + epsilon[, 4]
x5 <- lambda["x5", "F2"]*FS$F2 + epsilon[, 5]
x6 <- lambda["x6", "F2"]*FS$F2 + epsilon[, 6]
x7 <- lambda["x7", "F3"]*FS$F3 + epsilon[, 7]
x8 <- lambda["x8", "F3"]*FS$F3 + epsilon[, 8]
x9 <- lambda["x9", "F3"]*FS$F3 + epsilon[, 9]
ContData <- cbind(x1, x2, x3,
x4, x5, x6,
x7, x8, x9)
##################
# Run continuous model
# Check lavaan cont
model <- "f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 + x6
f3 =~ x7 + x8 + x9
f1 ~ f2 + f3"
model.sem  <- sem(model = model, data = ContData, ordered = F, std.lv = F)
summary(model.sem, rsquare = T)
cor(ContData)
thresh1 <- c(-2, 0, 2)
thresh2 <- c(-1, 0, 1)
thresh3 <- c(-1.2, 0.2, 1.2)
thresh4 <- c(-2.3, -0.5, 1)
thresh5 <- c(-1.2, 0.5, 1.7)
thresh6 <- c(-1.3, 0.7, 2.3)
thresh7 <- c(-2.4, -0.3, 0.7)
thresh8 <- c(-1.2, 0.6, 1.8)
thresh9 <- c(-1.4, 0.7, 1.9)
Data <- matrix(data = NA, nrow = 1000, ncol = 9)
Data[, 1] <- as.numeric(cut(ContData[, 1], breaks = c(-Inf, thresh1, Inf)))
Data[, 2] <- as.numeric(cut(ContData[, 1], breaks = c(-Inf, thresh2, Inf)))
Data[, 3] <- as.numeric(cut(ContData[, 1], breaks = c(-Inf, thresh3, Inf)))
Data[, 4] <- as.numeric(cut(ContData[, 2], breaks = c(-Inf, thresh4, Inf)))
Data[, 5] <- as.numeric(cut(ContData[, 2], breaks = c(-Inf, thresh5, Inf)))
Data[, 6] <- as.numeric(cut(ContData[, 2], breaks = c(-Inf, thresh6, Inf)))
Data[, 7] <- as.numeric(cut(ContData[, 3], breaks = c(-Inf, thresh7, Inf)))
Data[, 8] <- as.numeric(cut(ContData[, 3], breaks = c(-Inf, thresh8, Inf)))
Data[, 9] <- as.numeric(cut(ContData[, 3], breaks = c(-Inf, thresh9, Inf)))
View(Data)
colnames(Data) <- paste0(rep("x", 9), 1:9)
cor(Data)
cor(ContData)
lavCor(Data, ordered = T)
Data[, 1] <- as.numeric(cut(ContData[, 1], breaks = c(-Inf, thresh1, Inf)))
Data[, 2] <- as.numeric(cut(ContData[, 2], breaks = c(-Inf, thresh2, Inf)))
Data[, 3] <- as.numeric(cut(ContData[, 3], breaks = c(-Inf, thresh3, Inf)))
Data[, 4] <- as.numeric(cut(ContData[, 4], breaks = c(-Inf, thresh4, Inf)))
Data[, 5] <- as.numeric(cut(ContData[, 5], breaks = c(-Inf, thresh5, Inf)))
Data[, 6] <- as.numeric(cut(ContData[, 6], breaks = c(-Inf, thresh6, Inf)))
Data[, 7] <- as.numeric(cut(ContData[, 7], breaks = c(-Inf, thresh7, Inf)))
Data[, 8] <- as.numeric(cut(ContData[, 8], breaks = c(-Inf, thresh8, Inf)))
Data[, 9] <- as.numeric(cut(ContData[, 9], breaks = c(-Inf, thresh9, Inf)))
colnames(Data) <- paste0(rep("x", 9), 1:9)
cor(Data)
lavCor(Data, ordered = T)
cor(ContData)
# Check lavaan vs mirt
model.sem.cat  <- sem(model = model, data = Data, ordered = T, std.lv = F)
summary(model.sem.cat, rsquare = T)
summary(model.sem, rsquare = T)
lavInspect(model.sem.cat, what = "est")$beta
model.mirt <- mirt(Data,
model = "F1 = 1-3,
F2 = 4-6,
F3 = 7-9",
itemtype = "graded")
fs <- fscores(model.mirt) #, full.scores.SE = T)
View(fs)
lm(F1 ~ F2 + F3, data = as.data.frame(fs))
lm(f1 ~ f2 + f3, data = as.data.frame(predict(model.sem.cat)))
# Lavaan continuous
model.sem.con  <- sem(model = model, data = Data, ordered = F, std.lv = F)
# summary(model.sem.con)
lavInspect(model.sem.con, what = "est")$beta
fs <- fscores(model.mirt, full.scores.SE = T)
fs <- as.data.frame(fs)
fs <- within(fs, {
evar_f1 = SE_F1^1 * (1 - SE_F1)
evar_f2 = SE_F2^1 * (1 - SE_F2)
evar_f3 = SE_F3^1 * (1 - SE_F3)
ld_f1   = 1 - SE_F1
ld_f2   = 1 - SE_F2
ld_f3   = 1 - SE_F3
})
fixed_values <- colMeans(fs)
str.model <- '
eta1 =~ F1
eta2 =~ F2
eta3 =~ F3
eta1 ~ eta2 + eta3
'
str.fit <- cfa(model = str.model, data = fs, std.lv = T, se = "none")
# Adequate par table and fix values
par_table <- parTable(str.fit)
par_table$est <- NULL
par_table$start <- NULL
# Which values are freely estimated?
par_table$free <- 0
par_table$free[par_table$op == "~"] <- 1:sum(par_table$op == "~")
par_table$free[12] <- 3
# Fix values of loadings and error variances
# Loadings
par_table$ustart[1] <- fixed_values["ld_f1"]
par_table$ustart[2] <- fixed_values["ld_f2"]
par_table$ustart[3] <- fixed_values["ld_f3"]
# Error variances
par_table$ustart[6] <- fixed_values["evar_f1"]
par_table$ustart[7] <- fixed_values["evar_f2"]
par_table$ustart[8] <- fixed_values["evar_f3"]
# par_table$free[4] <- 0
# par_table$ustart[4] <- 0.3
# par_table$free[12] <- 0
# par_table$ustart[12] <- 0.5
str.final <- cfa(model = par_table, data = fs, std.lv = T, se = "none")
# summary(str.final)
lavInspect(str.final, what = "est")$beta
library(lavaan)
library(qwraps2)
library(fpp3)
library(dplyr)
library(xtable)
library(ggpubr)
library(ggplot2)
library(ggthemes)
# library(Cairo)
# CairoWin()
# Set wd
setwd("~/GitHub/ModelSelection_Simulation/Results")
# Load empty final results matrix
load("FinalResults.Rdata")
colnames(Results_final)[1:13] <- c("entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
load("design.Rdata")
# Load and re-analyze the data to correct minor error in Chull evaluation (which.min instead of which.max)
# Given that the name of the files can have "-1" or "-2" at the end, use regex to load them
# source("~/GitHub/ModelSelection_Simulation/evaluation.R", echo=TRUE) # Source corrected evaluation script
# setwd("~/GitHub/ModelSelection_Simulation/Results/Fit") # Set correct wd
#
# ik <- 0
# for(i in 1:144){
#   for(k in 1:50){
#     ik <- ik + 1
#     # browser()
#     file <- list.files(pattern = paste0("^FitRow", i, "Rep", k, "-"), all.files = T)
#     load(file)
#     res  <- vector(mode = "list", length = 1); res[[1]] <- results_ov; names(res) <- "Overview" # This line used only so evaluation has correct input
#     eval <- evaluation(res = res, clus = design[i, "nclus"])
#     Results_final[ik, 1:13] <- unlist(eval)
#   }
# }
# # Merge datasets
# design$Condition <- as.numeric(rownames(design))
# Results_final <- merge(x = design, y = Results_final, by = "Condition")
# col_order <- c("Condition", "Replication", "nclus", "ngroups", "coeff", "N_g", "balance", "sd",
#                "entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
#                "Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
# Results_final <- Results_final[, col_order]
# rm(col_order)
# save(Results_final, file = "FinalResCorrectModel.Rdata")
load("~/GitHub/ModelSelection_Simulation/Results/FinalResCorrectModel.Rdata")
Results_final <- Results_final %>% select(Condition:entropyR2, Chull_fac:ICL_fac)
colnames(Results_final) <- sub(pattern = "_fac", replacement = "", x = colnames(Results_final))
View(Results_final)
load("~/GitHub/ModelSelection_Simulation/Results/Fit/FitRow97Rep1-1.Rdata")
plot(results_ov$nrpar_fac, results_ov$LL_fac); lines(results_ov$nrpar_fac, results_ov$LL_fac)
results_ov
load("~/GitHub/ModelSelection_Simulation/Results/Fit/FitRow105Rep7-1.Rdata")
plot(results_ov$nrpar_fac, results_ov$LL_fac); lines(results_ov$nrpar_fac, results_ov$LL_fac)
results_ov
