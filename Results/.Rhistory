Data[Data[, "school"] == "Pasteur",]
Data[,vars]
Data[,"x1"]
Data[,c("x1", "x2")]
vars <- paste0("x", 1:9)
S <- lapply(X = unique(Data[, "school"]),
FUN = function(x) {
cov(Data[Data[, "school"] == x, vars])
}
)
N_g <- lapply(X = unique(Data[, "school"]),
FUN = function(x) {
nrow(Data[Data[, "school"] == x, vars])
}
)
N_g
fit2 <- cfa(parT, data = HolzingerSwineford1939, sample.cov = S, sample.nobs = N_g, ceq.simple = TRUE)
S <- lapply(X = unique(Data[, "school"]),
FUN = function(x) {
cov(Data[Data[, "school"] == x, vars])
}
)
fit2 <- cfa(parT, sample.cov = S, sample.nobs = N_g, ceq.simple = TRUE)
rm(fit2)
fit2 <- cfa(parT, sample.cov = S, sample.nobs = N_g, ceq.simple = TRUE)
View(fit2)
View(partable(fit2))
View(parT)
fit1 <- cfa(HS.model, data = HolzingerSwineford1939, group = "school",
group.equal = "loadings", ceq.simple = TRUE, meanstructure = F)
parT <- parTable(fit1)
parT$start <- NULL
parT$est   <- NULL
parT$se    <- NULL
Data <- HolzingerSwineford1939
vars <- paste0("x", 1:9)
S <- lapply(X = unique(Data[, "school"]),
FUN = function(x) {
cov(Data[Data[, "school"] == x, vars])
}
)
N_g <- lapply(X = unique(Data[, "school"]),
FUN = function(x) {
nrow(Data[Data[, "school"] == x, vars])
}
)
fit2 <- cfa(parT, sample.cov = S, sample.nobs = N_g, ceq.simple = TRUE)
View(partable(fit2))
fit2 <- cfa(parT, sample.cov = S, sample.nobs = N_g)#, ceq.simple = TRUE)
View(partable(fit2))
rm(fit2)
View(parT)
fit2 <- cfa(parT, sample.cov = S, sample.nobs = N_g)#, ceq.simple = TRUE)
View(partable(fit2))
View(parT)
load("C:/Users/perezalo/OneDrive - Tilburg University/R/Empirical Example/Emotions2/June/Data 06-12.RData")
lavinspect(MMLS.metric.final)
library(lavaan)
lavinspect(MMLS.metric.final)
lavInspect(MMLS.metric.final)
lavInspect(MMLS.metric.final, "est")
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "nu")
View(Dat)
View(Data)
# Metric final
MMLS.metric.final2 <- cfa(model = MMLS, data = Dat, group = "NATION", estimator = "MLM",
std.lv = F, group.equal = "loadings")
lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "nu")
lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "nu")[[1]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "nu")[[1]]
g_name
Dat$NATION
group.idx
group.sizes
vars
vars
colnames(Data)
group1 <- Dat[Dat$NATION == "1",]
library(dplyr)
group1 <- group1 %>% select(Q18:Q8) %>% scale(center = T, scale = F)
View(group1)
View(Data)
colMeans(group1)
lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "nu")[[1]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "nu")[[1]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "nu")[[46]]
lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "nu")[[46]]
lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "lambda")[[46]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "lambda")[[46]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "lambda")[[44]]
lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "lambda")[[44]]
View(Data)
View(Data)
head(scale(Data[Data$group == "1", -c(1:2)], scale = F))
head(scale(Data[Data$group == 1, -c(1:2)], scale = F))
head(scale(Data[Data$NATION == 1, -c(1:2)], scale = F))
View(Data)
head(scale(Dat[Dat$NATION == 1, -c(1:2)], scale = F))
View(Data)
View(Dat)
View(Data)
View(Dat)
library(misty)
cent <- as.data.frame(Dat) %>% mutate(across(vars, ~misty::center(.x, type="CWC", cluster = group.idx)))
MMLS.metric.final3 <- cfa(model = MMLS, data = cent, group = "NATION", estimator = "MLM",
std.lv = F, group.equal = "loadings")
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "lambda")[[46]]
lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "lambda")[[46]]
lapply(lavInspect(MMLS.metric.final3, "est"), "[[", "lambda")[[46]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "lambda")[[46]]; lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "lambda")[[46]]; lapply(lavInspect(MMLS.metric.final3, "est"), "[[", "lambda")[[46]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "lambda")[[12]]; lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "lambda")[[12]]; lapply(lavInspect(MMLS.metric.final3, "est"), "[[", "lambda")[[12]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "theta")[[12]]; lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "theta")[[12]]; lapply(lavInspect(MMLS.metric.final3, "est"), "[[", "theta")[[12]]
MMfit.final2 <- cfa(model = MM.final, data = Dat, group = "NATION",
group.equal = "loadings", estimator = "MLM",
group.partial = c("NE =~ Q24", "PE =~ Q24",
"NE =~ Q28"),
std.lv = F)
MMfit.final3 <- cfa(model = MM.final, data = cent, group = "NATION",
group.equal = "loadings", estimator = "MLM",
group.partial = c("NE =~ Q24", "PE =~ Q24",
"NE =~ Q28"),
std.lv = F)
lapply(lavInspect(MMfit.final, "est"), "[[", "lambda")[[12]]; lapply(lavInspect(MMfit.final2, "est"), "[[", "lambda")[[12]]; lapply(lavInspect(MMfit.final3, "est"), "[[", "lambda")[[12]]
lapply(lavInspect(MMfit.final, "est"), "[[", "lambda")[[1]]; lapply(lavInspect(MMfit.final2, "est"), "[[", "lambda")[[1]]; lapply(lavInspect(MMfit.final3, "est"), "[[", "lambda")[[1]]
x <- rnorm(100)
b <- x * 5
lm(b ~ x)
y <- b * - 2
lm(cbind(b, y) ~ b + x)
library(lavaan)
x <- rnorm(100)
z <- x * 5
y <- b * - 2
model <- '
# Mediation path
b ~ a * x
y ~ b * z + i * a:b
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * a:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
x <- rnorm(100)
z <- x * 5
y <- z * - 2
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
x <- rnorm(100)
z <- x * 5
y <- z * - 2
lm(cbind(b, y) ~ b + x)
x <- rnorm(100)
z <- x * 5
y <- z * - 2
lm(cbind(b, y) ~ b + x)
lm(cbind(z, y) ~ z + x)
summary(lm(cbind(z, y) ~ z + x))
x <- rnorm(100, 5, 2)
z <- (x * 5) + rnorm(100, 0, 0.05)
y <- (z * - 2) + rnorm(100, 0, 0.05)
summary(lm(cbind(z, y) ~ z + x))
lm(z ~ x)
library(lavaan)
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
x <- rnorm(100, 5, 2)
z <- (x * 5) + rnorm(100, 0, 0.05)
y <- (z * - 2) + rnorm(100, 0, 0.05)
library(lavaan)
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
x <- rnorm(100, 5, 2)
z <- (x * 5) + rnorm(100, 0, 0.05)
y <- (z * (- 2 * x)) + rnorm(100, 0, 0.05)
library(lavaan)
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
x <- rnorm(100, 5, 2)
z <- (x * 5) + rnorm(100, 0, 0.05)
y <- (z * - 2) + (-0.5 * z * x) + rnorm(100, 0, 0.05)
library(lavaan)
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
x <- rnorm(100, 5, 2)
z <- (x * 5) + rnorm(100, 0)
y <- (z * - 2) + (-0.5 * z * x) + rnorm(100, 0)
library(lavaan)
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
summary(lm(cbind(z, y) ~ z + x))
x <- rnorm(1000, 5, 2)
z <- (x * 5) + rnorm(1000, 0, 2)
y <- (z * - 2) + (-0.5 * z * x) + rnorm(1000, 0, 2)
library(lavaan)
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
z <- (x * 5) + runif(1000, -1, 1)
x <- runif(1000, -1, 1)
z <- (x * 5) + runif(1000, -1, 1)
y <- (z * - 2) + (-0.5 * z * x) + runif(1000, -1, 1)
library(lavaan)
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
summary(lm(cbind(z, y) ~ z + x))
summary(lm(cbind(z, y) ~ z + x + x*z))
model1 <- lm(z ~ x)
model2 <- lm(y ~ z + z:x)
??lm2list
install.packages("lm2list")
install.packages("manymome")
library(manymome)
model1 <- lm(z ~ x)
model2 <- lm(y ~ z + z:x)
lm2list(model1)
lm2list(model1, model2)
summary(lm2list(model1, model2))
summary(fit)
summary(lm2list(model1, model2))
?ginv
MASS::ginv()
MASS::ginv
source("~/GitHub/MMG-SEM/R/SE.R", echo=TRUE)
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
1 - (2*5 + 3*4)
1 - 2*5 + 3*4
2*5 + 3*4
1 - 2*5
x <- rnorm(n = 100, mean = 3, sd = 2)
y <- x + rnorm(n = 100, mean = 0.5, sd = 0.5)
xy <- c(x, y)
xy <- cbind(x, y)
View(xy)
cov(xy)
xy_centered <- scale(x = xy, center = T, scale = F)
cov(xy)
cov(xy_centered)
144*50
48*.75
## The famous Holzinger and Swineford (1939) example
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
HolzingerSwineford1939
data(HolzingerSwineford1939)
data("HolzingerSwineford1939")
load("HolzingerSwineford1939")
load(HolzingerSwineford1939)
print(HolzingerSwineford1939)
library(lavaan)
data(HolzingerSwineford1939)
force(HolzingerSwineford1939)
fit <- cfa(HS.model, data = HolzingerSwineford1939, group = "sex", group.equal = "loadings")
View(partable(fit))
library(lavaan)
library(qwraps2)
library(fpp3)
library(dplyr)
library(xtable)
library(ggpubr)
library(ggplot2)
# Set wd
setwd("~/GitHub/ModelSelection_Simulation/Results")
# Load empty final results matrix
load("FinalResults.Rdata")
colnames(Results_final)[1:13] <- c("entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
load("design.Rdata")
# Merge datasets
design$Condition <- as.numeric(rownames(design))
Results_final <- merge(x = design, y = Results_final, by = "Condition")
col_order <- c("Condition", "Replication", "nclus", "ngroups", "coeff", "N_g", "balance", "sd",
"entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
Results_final <- Results_final[, col_order]
rm(col_order)
# Fill in the matrix with all results
ncond <- unique(Results_final$Condition) # How many conditions?
K <- length(unique(Results_final$Replication)) # How many replications?
for (i in ncond) {
test <- NA
test <- try(load(paste0("ResultRow", i, ".Rdata")))
if(!c(class(test) == "try-error")){
Results_final[(K*(i-1)+1):(i*K), 9:21] <- ResultsRow
}
}
# remove uncomplete entries
Results_final <- Results_final[!is.na(Results_final$BIC_G), ]
measures <- Results_final %>% dplyr::select(Chull:ICL_fac) %>% as.matrix() %>% as.data.frame()
measures <- lapply(X = measures, FUN = factor, levels = c("-1", "0", "1"), labels = c("Under", "Correct", "Over")) %>% as.data.frame()
Results_final[, 10:21] <- measures
Results_final[, "entropyR2"] <- as.numeric(Results_final[, "entropyR2"])
####################################################################################################
############################ TABLES - CLUSTER AND PARAMETER RECOVERY ###############################
####################################################################################################
# Check mean results per simulation factor
# Create a function for this
count_results <- function(data, by, type = "count"){
# Extract necessary columns
reduced <- data %>% dplyr::select(Chull:ICL_fac)
#Initialize objects to store
counted        <- vector(mode = "list", length = ncol(reduced))
names(counted) <- colnames(reduced)
final <- c()
# browser()
# Count per column
for(i in 1:ncol(reduced)){
if(length(by) == 1 && by == "total"){
counted[[i]] <- data %>% count(get(colnames(reduced)[i]), .drop = F) %>% filter(!is.na(`get(colnames(reduced)[i])`)) # Count and remove NA
if(type == "relative"){
counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]]), drop = F]/sum(counted[[i]][, ncol(counted[[i]]), drop = F]), 3)
}
# browser()
colnames(counted[[i]]) <- c("result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, 1, drop = F], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
} else {
# browser()
counted[[i]] <- data %>% group_by(across(all_of(by))) %>% count(get(colnames(reduced)[i]), .drop = F) %>% filter(!is.na(`get(colnames(reduced)[i])`)) # count per measure
# browser()
if(type == "relative"){
counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]])]/sum(counted[[i]][1:3, ncol(counted[[i]])]), 3)
}
colnames(counted[[i]]) <- c(by, "result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, c(seq_len(length(by)), (length(by) + 1))], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
}
}
return(final)
}
# Pre-check to know if there are NAs
colSums(apply(Results_final, 2, is.na))
# Main effects
count_results(data = Results_final, by = "total", type = "relative")
count_results(data = Results_final, by = c("nclus"), type = "relative")
count_results(data = Results_final, by = c("N_g"), type = "relative")
count_results(data = Results_final, by = c("ngroups"), type = "relative")
count_results(data = Results_final, by = c("coeff"), type = "relative")
count_results(data = Results_final, by = c("balance"), type = "relative")
count_results(data = Results_final, by = c("sd"), type = "relative")
count_results(data = Results_final, by = c("sd", "N_g"), type = "relative")
mean(Results_final$entropyR2)
# Main effects
count_results(data = Results_final, by = "total", type = "relative")
count_results(data = Results_final, by = c("nclus"), type = "relative")
count_results(data = Results_final, by = c("N_g"), type = "relative")
count_results(data = Results_final, by = c("coeff"), type = "relative")
count_results(data = Results_final, by = c("sd"), type = "relative")
# HEATMAP
a <- count_results(data = Results_final, by = "sd", type = "relative") %>% filter(result == "Correct")
a1 <- a %>% dplyr::select(nclus, Chull:ICL) %>% pivot_longer(cols = Chull:ICL, names_to = "Measure", values_to = "Value")
# HEATMAP
a <- count_results(data = Results_final, by = c("sd", "nclus"), type = "relative") %>% filter(result == "Correct")
a1 <- a %>% dplyr::select(nclus, Chull:ICL) %>% pivot_longer(cols = Chull:ICL, names_to = "Measure", values_to = "Value")
View(a1)
View(a1)
ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~nclus) +
geom_tile(aes(fill = Value))
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~nclus) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value))
ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~nclus) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value))
ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~nclus) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value)) + scale_fill_gradient(low = "white", high = "red")
ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~nclus) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value)) + scale_fill_gradient(low = "yellow", high = "red")
0.05/(13*47)
# HEATMAP
a <- count_results(data = Results_final, by = c("sd", "N_g"), type = "relative") %>% filter(result == "Correct")
a1 <- a %>% dplyr::select(nclus, Chull:ICL) %>% pivot_longer(cols = Chull:ICL, names_to = "Measure", values_to = "Value")
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~N_g) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value)) + scale_fill_gradient(low = "yellow", high = "red")
# HEATMAP
a <- count_results(data = Results_final, by = c("sd", "N_g"), type = "relative") %>% filter(result == "Correct")
a1 <- a %>% dplyr::select(N_g, sd, Chull:ICL) %>% pivot_longer(cols = Chull:ICL, names_to = "Measure", values_to = "Value")
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~N_g) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value)) + scale_fill_gradient(low = "yellow", high = "red")
plot
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~N_g) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value)) +
scale_fill_gradient(low = "yellow", high = "red") +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Sample Size", breaks = NULL, labels = NULL))
plot
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(~N_g) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value)) +
scale_fill_gradient(low = "yellow", high = "red") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Sample Size", breaks = NULL, labels = NULL))
plot
# HEATMAP
a <- count_results(data = Results_final, by = c("sd", "N_g", "nclus"), type = "relative") %>% filter(result == "Correct")
a1 <- a %>% dplyr::select(N_g, sd, nclus, Chull:ICL) %>% pivot_longer(cols = Chull:ICL, names_to = "Measure", values_to = "Value")
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(nclus~N_g) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value)) +
scale_fill_gradient(low = "yellow", high = "red") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Sample Size", breaks = NULL, labels = NULL))
plot
# HEATMAP
a <- count_results(data = Results_final, by = c("sd", "N_g", "nclus"), type = "relative") %>% filter(result == "Correct")
a1 <- a %>% dplyr::select(N_g, sd, nclus, Chull:ICL) %>% pivot_longer(cols = Chull:ICL, names_to = "Measure", values_to = "Value")
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(nclus~N_g) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value)) +
scale_fill_gradient(low = "yellow", high = "red") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Sample Size", breaks = NULL, labels = NULL)) +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL))
plot
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(nclus~N_g) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value)) +
scale_fill_gradient(low = "yellow", high = "red") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Sample Size", breaks = NULL, labels = NULL)) +
scale_y_discrete(sec.axis = sec_axis(~ . , name = "Number of clusters", breaks = NULL, labels = NULL))
plot <- ggplot(data = a1, aes(x = sd, y = Measure)) + facet_grid(nclus~N_g) +
geom_tile(aes(fill = Value)) + geom_text(aes(label = Value)) +
scale_fill_gradient(low = "yellow", high = "red") +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Sample Size", breaks = NULL, labels = NULL)) # +
plot
# Main effects
count_results(data = Results_final, by = "total", type = "relative")
count_results(data = Results_final, by = c("nclus"), type = "relative")
t(count_results(data = Results_final, by = c("nclus"), type = "relative"))
tinytex::install_tinytex()
120*6
50*6
# Main effects
count_results(data = Results_final, by = "total", type = "relative")
count_results(data = Results_final, by = c("nclus"), type = "relative")
transpose(count_results(data = Results_final, by = c("nclus"), type = "relative"))
install.packages("data.table")
data.table::transpose(count_results(data = Results_final, by = c("nclus"), type = "relative"))
?transpose
data.table::transpose(count_results(data = Results_final, by = c("nclus"), type = "relative"), keep.names = T)
data.table::transpose(count_results(data = Results_final, by = c("nclus"), type = "relative"), keep.names = "rn")
K_res   <- count_results(data = Results_final, by = c("nclus"), type = "relative")
N_res   <- count_results(data = Results_final, by = c("N_g"), type = "relative")
G_res   <- count_results(data = Results_final, by = c("ngroups"), type = "relative")
B_res   <- count_results(data = Results_final, by = c("coeff"), type = "relative")
Bal_res <- count_results(data = Results_final, by = c("balance"), type = "relative")
sd_res  <- count_results(data = Results_final, by = c("sd"), type = "relative")
K_res
K_res   <- count_results(data = Results_final, by = c("nclus"), type = "relative")   %>% select(nclus:ICL)
N_res   <- count_results(data = Results_final, by = c("N_g"), type = "relative")     %>% select(N_g:ICL)
G_res   <- count_results(data = Results_final, by = c("ngroups"), type = "relative") %>% select(ngroups:ICL)
B_res   <- count_results(data = Results_final, by = c("coeff"), type = "relative")   %>% select(coeff:ICL)
Bal_res <- count_results(data = Results_final, by = c("balance"), type = "relative") %>% select(balance:ICL)
sd_res  <- count_results(data = Results_final, by = c("sd"), type = "relative")      %>% select(sd:ICL)
sd_res
K_res   <- data.table::transpose(K_res, keep.names = "rn")
N_res   <- data.table::transpose(N_res, keep.names = "rn")
G_res   <- data.table::transpose(G_res, keep.names = "rn")
B_res   <- data.table::transpose(B_res, keep.names = "rn")
Bal_res <- data.table::transpose(Bal_res, keep.names = "rn")
sd_res  <- data.table::transpose(sd_res, keep.names = "rn")
sd_res
1 + 1
