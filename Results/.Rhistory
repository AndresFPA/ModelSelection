n_g <- lavInspect(fit.MM, what = "nobs")
p <- Data %>% dplyr::select(x1:x6) %>% ncol()
q <- length(lavNames(fit.MM, type = "lv"))
# Remove the structural parameters of the parameter table
idx.str   <- which(PT.MM$rhs %in% lavNames(fit.MM, type = "lv"))
PT.MM     <- PT.MM[-idx.str, ]
# Fill out MM parameters in the fake table
# First make a full parameter column
PT.MM$par   <- paste0(PT.MM$lhs, PT.MM$op, PT.MM$rhs, ".g", PT.MM$group)
PT.fake$par <- paste0(PT.fake$lhs, PT.fake$op, PT.fake$rhs, ".g", PT.fake$group)
idx.par <- match(PT.MM$par, PT.fake$par) # indices of parameters from PT.MM on PT.fake
PT.fake$ustart[idx.par] <- PT.MM$est
PT.fake$free[is.na(PT.fake$ustart)] <- 1:sum(is.na(PT.fake$ustart))
PT.fake$par <- NULL
# SM
fit.global <- sem(model         = PT.fake,
data          = Data,
information   = "observed",
meanstructure = F,
group         = "group")
# Fit a global SAM ----------------------------------
# MM
HS.MM <- '
visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
'
fit.MM <- cfa(HS.MM, data = Data, information = "observed", meanstructure = F, group = "group")
# Get parameter table of step 1
PT.MM <- partable(fit.MM)
# Extract all parameters
est_S1 <- lavInspect(object = fit.MM, what = "est")
cov_S1 <- lapply(est_S1, "[[", "psi")
n_g <- lavInspect(fit.MM, what = "nobs")
p <- Data %>% dplyr::select(x1:x6) %>% ncol()
q <- length(lavNames(fit.MM, type = "lv"))
# Remove the structural parameters of the parameter table
idx.str   <- which(PT.MM$rhs %in% lavNames(fit.MM, type = "lv"))
PT.MM     <- PT.MM[-idx.str, ]
# Fill out MM parameters in the fake table
# First make a full parameter column
PT.MM$par   <- paste0(PT.MM$lhs, PT.MM$op, PT.MM$rhs, ".g", PT.MM$group)
PT.fake$par <- paste0(PT.fake$lhs, PT.fake$op, PT.fake$rhs, ".g", PT.fake$group)
fit.fake     <- sem(HS.model, data = Data, information = "observed", meanstructure = F, do.fit = F, group = "group")
PT.fake      <- parTable(fit.fake)
PT.fake$se   <- NULL
PT.fake$est  <- NULL
PT.fake$free <- 0
PT.fake$par <- paste0(PT.fake$lhs, PT.fake$op, PT.fake$rhs, ".g", PT.fake$group)
idx.par <- match(PT.MM$par, PT.fake$par) # indices of parameters from PT.MM on PT.fake
PT.fake$ustart[idx.par] <- PT.MM$est
PT.fake$free[is.na(PT.fake$ustart)] <- 1:sum(is.na(PT.fake$ustart))
PT.fake$par <- NULL
# SM
fit.global <- sem(model         = PT.fake,
data          = Data,
information   = "observed",
meanstructure = F,
group         = "group")
summary(fit.global) # Pointwise estimation is correct. SE is underestimated (as expected).
PT.fake
PT.MM$est
PT.fake$start <- NULL
# SM
fit.global <- sem(model         = PT.fake,
data          = Data,
information   = "observed",
meanstructure = F,
group         = "group")
summary(fit.global) # Pointwise estimation is correct. SE is underestimated (as expected).
partable(fit.global)
library(lavaan)
HS.model <- ' visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed =~ x7 + x8 + x9 '
fit <- cfa(HS.model, data = HolzingerSwineford1939, group = "school",
group.equal = "loadings")
parTable(fit)
fit1 <- cfa(HS.model, data = HolzingerSwineford1939, group = "school",
group.equal = "loadings", ceq.simple = TRUE)
parTable(fit1)
View(parTable(fit))
View(parTable(fit1))
library(lavaan)
HS.model <- ' visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed =~ x7 + x8 + x9 '
fit <- cfa(HS.model, data = HolzingerSwineford1939, group = "school",
group.equal = "loadings")
fit1 <- cfa(HS.model, data = HolzingerSwineford1939, group = "school",
group.equal = "loadings", ceq.simple = TRUE)
parT <- parTable(fit1)
parT$start <- NULL
parT$est   <- NULL
parT$se    <- NULL
View(parT)
HolzingerSwineford1939
vars <- paste("x", 1:9)
vars <- paste(paste0("x", 1:9), collapse = ",")
cov(HolzingerSwineford1939[HolzingerSwineford1939[, "school"] == x, vars])
unique(HolzingerSwineford1939[, "school"])
Data <- HolzingerSwineford1939
Data <- HolzingerSwineford1939
vars <- paste(paste0("x", 1:9), collapse = ",")
S <- lapply(X = unique(Data[, "school"]), FUN = function(x) {
cov(Data[Data[, "school"] == x, vars])
})
vars
View(Data)
unique(Data[, "school"])
cov(Data[Data[, "school"] == x, vars])
S <- lapply(X = unique(Data[, "school"]),
FUN = function(x) {
cov(Data[Data[, "school"] == x, vars])
}
)
cov(Data[Data[, "school"] == "Pasteur", vars])
Data[Data[, "school"] == "Pasteur", vars]
Data[, "school"] == "Pasteur"
Data[Data[, "school"] == "Pasteur",]
Data[,vars]
Data[,"x1"]
Data[,c("x1", "x2")]
vars <- paste0("x", 1:9)
S <- lapply(X = unique(Data[, "school"]),
FUN = function(x) {
cov(Data[Data[, "school"] == x, vars])
}
)
N_g <- lapply(X = unique(Data[, "school"]),
FUN = function(x) {
nrow(Data[Data[, "school"] == x, vars])
}
)
N_g
fit2 <- cfa(parT, data = HolzingerSwineford1939, sample.cov = S, sample.nobs = N_g, ceq.simple = TRUE)
S <- lapply(X = unique(Data[, "school"]),
FUN = function(x) {
cov(Data[Data[, "school"] == x, vars])
}
)
fit2 <- cfa(parT, sample.cov = S, sample.nobs = N_g, ceq.simple = TRUE)
rm(fit2)
fit2 <- cfa(parT, sample.cov = S, sample.nobs = N_g, ceq.simple = TRUE)
View(fit2)
View(partable(fit2))
View(parT)
fit1 <- cfa(HS.model, data = HolzingerSwineford1939, group = "school",
group.equal = "loadings", ceq.simple = TRUE, meanstructure = F)
parT <- parTable(fit1)
parT$start <- NULL
parT$est   <- NULL
parT$se    <- NULL
Data <- HolzingerSwineford1939
vars <- paste0("x", 1:9)
S <- lapply(X = unique(Data[, "school"]),
FUN = function(x) {
cov(Data[Data[, "school"] == x, vars])
}
)
N_g <- lapply(X = unique(Data[, "school"]),
FUN = function(x) {
nrow(Data[Data[, "school"] == x, vars])
}
)
fit2 <- cfa(parT, sample.cov = S, sample.nobs = N_g, ceq.simple = TRUE)
View(partable(fit2))
fit2 <- cfa(parT, sample.cov = S, sample.nobs = N_g)#, ceq.simple = TRUE)
View(partable(fit2))
rm(fit2)
View(parT)
fit2 <- cfa(parT, sample.cov = S, sample.nobs = N_g)#, ceq.simple = TRUE)
View(partable(fit2))
View(parT)
load("C:/Users/perezalo/OneDrive - Tilburg University/R/Empirical Example/Emotions2/June/Data 06-12.RData")
lavinspect(MMLS.metric.final)
library(lavaan)
lavinspect(MMLS.metric.final)
lavInspect(MMLS.metric.final)
lavInspect(MMLS.metric.final, "est")
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "nu")
View(Dat)
View(Data)
# Metric final
MMLS.metric.final2 <- cfa(model = MMLS, data = Dat, group = "NATION", estimator = "MLM",
std.lv = F, group.equal = "loadings")
lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "nu")
lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "nu")[[1]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "nu")[[1]]
g_name
Dat$NATION
group.idx
group.sizes
vars
vars
colnames(Data)
group1 <- Dat[Dat$NATION == "1",]
library(dplyr)
group1 <- group1 %>% select(Q18:Q8) %>% scale(center = T, scale = F)
View(group1)
View(Data)
colMeans(group1)
lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "nu")[[1]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "nu")[[1]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "nu")[[46]]
lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "nu")[[46]]
lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "lambda")[[46]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "lambda")[[46]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "lambda")[[44]]
lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "lambda")[[44]]
View(Data)
View(Data)
head(scale(Data[Data$group == "1", -c(1:2)], scale = F))
head(scale(Data[Data$group == 1, -c(1:2)], scale = F))
head(scale(Data[Data$NATION == 1, -c(1:2)], scale = F))
View(Data)
head(scale(Dat[Dat$NATION == 1, -c(1:2)], scale = F))
View(Data)
View(Dat)
View(Data)
View(Dat)
library(misty)
cent <- as.data.frame(Dat) %>% mutate(across(vars, ~misty::center(.x, type="CWC", cluster = group.idx)))
MMLS.metric.final3 <- cfa(model = MMLS, data = cent, group = "NATION", estimator = "MLM",
std.lv = F, group.equal = "loadings")
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "lambda")[[46]]
lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "lambda")[[46]]
lapply(lavInspect(MMLS.metric.final3, "est"), "[[", "lambda")[[46]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "lambda")[[46]]; lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "lambda")[[46]]; lapply(lavInspect(MMLS.metric.final3, "est"), "[[", "lambda")[[46]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "lambda")[[12]]; lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "lambda")[[12]]; lapply(lavInspect(MMLS.metric.final3, "est"), "[[", "lambda")[[12]]
lapply(lavInspect(MMLS.metric.final, "est"), "[[", "theta")[[12]]; lapply(lavInspect(MMLS.metric.final2, "est"), "[[", "theta")[[12]]; lapply(lavInspect(MMLS.metric.final3, "est"), "[[", "theta")[[12]]
MMfit.final2 <- cfa(model = MM.final, data = Dat, group = "NATION",
group.equal = "loadings", estimator = "MLM",
group.partial = c("NE =~ Q24", "PE =~ Q24",
"NE =~ Q28"),
std.lv = F)
MMfit.final3 <- cfa(model = MM.final, data = cent, group = "NATION",
group.equal = "loadings", estimator = "MLM",
group.partial = c("NE =~ Q24", "PE =~ Q24",
"NE =~ Q28"),
std.lv = F)
lapply(lavInspect(MMfit.final, "est"), "[[", "lambda")[[12]]; lapply(lavInspect(MMfit.final2, "est"), "[[", "lambda")[[12]]; lapply(lavInspect(MMfit.final3, "est"), "[[", "lambda")[[12]]
lapply(lavInspect(MMfit.final, "est"), "[[", "lambda")[[1]]; lapply(lavInspect(MMfit.final2, "est"), "[[", "lambda")[[1]]; lapply(lavInspect(MMfit.final3, "est"), "[[", "lambda")[[1]]
x <- rnorm(100)
b <- x * 5
lm(b ~ x)
y <- b * - 2
lm(cbind(b, y) ~ b + x)
library(lavaan)
x <- rnorm(100)
z <- x * 5
y <- b * - 2
model <- '
# Mediation path
b ~ a * x
y ~ b * z + i * a:b
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * a:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
x <- rnorm(100)
z <- x * 5
y <- z * - 2
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
x <- rnorm(100)
z <- x * 5
y <- z * - 2
lm(cbind(b, y) ~ b + x)
x <- rnorm(100)
z <- x * 5
y <- z * - 2
lm(cbind(b, y) ~ b + x)
lm(cbind(z, y) ~ z + x)
summary(lm(cbind(z, y) ~ z + x))
x <- rnorm(100, 5, 2)
z <- (x * 5) + rnorm(100, 0, 0.05)
y <- (z * - 2) + rnorm(100, 0, 0.05)
summary(lm(cbind(z, y) ~ z + x))
lm(z ~ x)
library(lavaan)
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
x <- rnorm(100, 5, 2)
z <- (x * 5) + rnorm(100, 0, 0.05)
y <- (z * - 2) + rnorm(100, 0, 0.05)
library(lavaan)
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
x <- rnorm(100, 5, 2)
z <- (x * 5) + rnorm(100, 0, 0.05)
y <- (z * (- 2 * x)) + rnorm(100, 0, 0.05)
library(lavaan)
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
x <- rnorm(100, 5, 2)
z <- (x * 5) + rnorm(100, 0, 0.05)
y <- (z * - 2) + (-0.5 * z * x) + rnorm(100, 0, 0.05)
library(lavaan)
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
x <- rnorm(100, 5, 2)
z <- (x * 5) + rnorm(100, 0)
y <- (z * - 2) + (-0.5 * z * x) + rnorm(100, 0)
library(lavaan)
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
summary(lm(cbind(z, y) ~ z + x))
x <- rnorm(1000, 5, 2)
z <- (x * 5) + rnorm(1000, 0, 2)
y <- (z * - 2) + (-0.5 * z * x) + rnorm(1000, 0, 2)
library(lavaan)
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
z <- (x * 5) + runif(1000, -1, 1)
x <- runif(1000, -1, 1)
z <- (x * 5) + runif(1000, -1, 1)
y <- (z * - 2) + (-0.5 * z * x) + runif(1000, -1, 1)
library(lavaan)
model <- '
# Mediation path
z ~ a * x
y ~ b * z + i * x:z
'
# Fit the model to the data
fit <- sem(model, data = cbind(x,z,y))
summary(fit)
summary(lm(cbind(z, y) ~ z + x))
summary(lm(cbind(z, y) ~ z + x + x*z))
model1 <- lm(z ~ x)
model2 <- lm(y ~ z + z:x)
??lm2list
install.packages("lm2list")
install.packages("manymome")
library(manymome)
model1 <- lm(z ~ x)
model2 <- lm(y ~ z + z:x)
lm2list(model1)
lm2list(model1, model2)
summary(lm2list(model1, model2))
summary(fit)
summary(lm2list(model1, model2))
?ginv
MASS::ginv()
MASS::ginv
source("~/GitHub/MMG-SEM/R/SE.R", echo=TRUE)
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
library(lavaan)
library(qwraps2)
library(fpp3)
library(dplyr)
library(xtable)
library(ggpubr)
library(ggplot2)
library(ggthemes)
# library(Cairo)
# CairoWin()
# Set wd
setwd("~/GitHub/ModelSelection_Simulation/Results")
# Load empty final results matrix
load("FinalResults.Rdata")
colnames(Results_final)[1:13] <- c("entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
load("design.Rdata")
# Merge datasets
design$Condition <- as.numeric(rownames(design))
Results_final <- merge(x = design, y = Results_final, by = "Condition")
col_order <- c("Condition", "Replication", "nclus", "ngroups", "coeff", "N_g", "balance", "sd",
"entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
Results_final <- Results_final[, col_order]
rm(col_order)
# Fill in the matrix with all results
ncond <- unique(Results_final$Condition) # How many conditions?
K <- length(unique(Results_final$Replication)) # How many replications?
for (i in ncond) {
test <- NA
test <- try(load(paste0("ResultRow", i, ".Rdata")))
if(!c(class(test) == "try-error")){
Results_final[(K*(i-1)+1):(i*K), 9:21] <- ResultsRow
}
}
# remove uncomplete entries
Results_final <- Results_final[!is.na(Results_final$BIC_G), ]
# Turn NAs from Chull into FALSE input (Chull was not able to select any model)
# apply(X = apply(X = Results_final, MARGIN = 2, FUN = is.na), MARGIN = 2, FUN = sum)
# Results_final$`Chull Scree` <- ifelse(test = is.na(Results_final$`Chull Scree`), yes = FALSE, no = Results_final$`Chull Scree`)
# Change conventions, so it is easier to understand
changed <- Results_final %>% dplyr::select(Chull:ICL_fac) %>% as.matrix() %>% as.data.frame() %>%
mutate(
Chull     = recode(Chull, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
BIC_G     = recode(BIC_G, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
BIC_N     = recode(BIC_N, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
AIC       = recode(AIC, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
AIC3      = recode(AIC3, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
ICL       = recode(ICL, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
Chull_fac = recode(Chull_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
BIC_G_fac = recode(BIC_G_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
BIC_N_fac = recode(BIC_N_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
AIC_fac   = recode(AIC_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
AIC3_fac  = recode(AIC3_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
ICL_fac   = recode(ICL_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1")
)
changed <- lapply(X = changed, FUN = factor, levels = c("-1", "0", "1"), labels = c("Under", "Correct", "Over")) %>% as.data.frame()
Results_final[, 10:21] <- changed
Results_final[, "entropyR2"] <- as.numeric(Results_final[, "entropyR2"])
View(Results_final)
Results_final[which(Results_final$Condition == 76 & Results_final$Replication == 4), ]
unlist(Results_final[which(Results_final$Condition == 76 & Results_final$Replication == 4), ])
(Results_final[which(Results_final$Condition == 76 & Results_final$Replication == 4), ])[, 3:9]
(Results_final[which(Results_final$Condition == 76 & Results_final$Replication == 4), ])[, 3:8]
####################################################################################################
############################ TABLES - CLUSTER AND PARAMETER RECOVERY ###############################
####################################################################################################
# Check mean results per simulation factor
# Create a function for this
count_results <- function(data, by, type = "count"){
# Extract necessary columns
reduced <- data %>% dplyr::select(Chull:ICL_fac)
#Initialize objects to store
counted        <- vector(mode = "list", length = ncol(reduced))
names(counted) <- colnames(reduced)
final <- c()
# Count per column
for(i in 1:ncol(reduced)){
if(by == "total"){
counted[[i]] <- data %>% count(get(colnames(reduced)[i]), .drop = F)
# browser()
if(type == "relative"){
counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]]), drop = F]/sum(counted[[i]][1:3, ncol(counted[[i]]), drop = F]), 3)
}
# browser()
colnames(counted[[i]]) <- c("result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, 1, drop = F], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
} else {
counted[[i]] <- data %>% group_by(across(all_of(by))) %>% count(get(colnames(reduced)[i]), .drop = F) # count per measure
if(type == "relative"){
counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]])]/sum(counted[[i]][1:3, ncol(counted[[i]])]), 3)
}
colnames(counted[[i]]) <- c(by, "result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, c(seq_len(length(by)), (length(by) + 1))], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
}
}
return(final)
}
# Main effects
count_results(data = Results_final, by = "total", type = "relative")
count_results(data = Results_final, by = c("nclus"), type = "relative")
count_results(data = Results_final, by = c("N_g"), type = "relative")
count_results(data = Results_final, by = c("ngroups"), type = "relative")
count_results(data = Results_final, by = c("coeff"), type = "relative")
count_results(data = Results_final, by = c("balance"), type = "relative")
count_results(data = Results_final, by = c("sd"), type = "relative")
mean(Results_final$entropyR2)
View(Results_final %>% group_by(nclus, N_g, ngroups, coeff, balance, sd) %>% summarise(across(entropyR2, mean)))
510/60
