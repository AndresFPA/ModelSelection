rownames(design) <- seq_len(nrow(design))
# Run mini "sim"
R2 <- numeric(72)
set.seed(1)
for(i in 1:72){
print(i)
R2[i] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 12,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
set.seed(1)
for(i in 1:72){
print(i)
R2[i] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 12,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
library(lavaan)
for(i in 1:72){
print(i)
R2[i] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 12,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
mean(R2)
summary(R2)
which.min(R2)
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
# Run mini "sim"
R2 <- numeric(72)
set.seed(1)
for(i in 1:72){
print(i)
R2[i] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 12,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
mean(R2)
R2
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
for(i in 1:72){
print(i)
R2[i] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 12,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
Sigma
Sigma[[1,1]]
cov_eta[[g]]
cov_eta
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
for(i in 1:72){
print(i)
R2[i] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 12,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
mean(R2)
summary(R2)
which.min(R2)
# Run mini "sim"
R2 <- vector(mode = "list", length = 72)
set.seed(1)
# Run mini "sim"
R2 <- vector(mode = "list", length = 72)
set.seed(1)
for(i in 1:72){
print(i)
R2[[i]] <- numeric(50)
for(k in 1:50){
R2[[i]][k] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 12,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
}
# Run mini "sim"
R2 <- vector(mode = "list", length = 72)
set.seed(1)
for(i in 1:72){
print(i)
R2[[i]] <- numeric(50)
for(k in 1:50){
print(k)
R2[[i]][k] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 12,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
}
set.seed(1)
for(i in 56:72){
print(i)
R2[[i]] <- numeric(50)
for(k in 1:50){
print(k)
R2[[i]][k] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 12,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
}
lapply(X = R2, FUN = mean)
mean(unlist(R2))
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
# Run mini "sim"
R2 <- vector(mode = "list", length = 72)
set.seed(1)
for(i in 1:72){
print(i)
R2[[i]] <- numeric(20)
for(k in 1:20){
print(k)
R2[[i]][k] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 100,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
}
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
set.seed(1)
for(i in 1:72){
print(i)
R2[[i]] <- numeric(20)
for(k in 1:20){
print(k)
R2[[i]][k] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 100,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
}
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
set.seed(1)
for(i in 1:72){
print(i)
R2[[i]] <- numeric(20)
for(k in 1:20){
print(k)
R2[[i]][k] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 100,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
}
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
set.seed(1)
for(i in 1:72){
print(i)
R2[[i]] <- numeric(20)
for(k in 1:20){
print(k)
R2[[i]][k] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 100,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
}
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
set.seed(1)
for(i in 1:72){
print(i)
R2[[i]] <- numeric(20)
for(k in 1:20){
print(k)
R2[[i]][k] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 100,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
}
R2[[14]]
R2[[15]]
source("~/GitHub/ModelSelection_Simulation/Entropy/DataGeneration.R", echo=TRUE)
set.seed(1)
for(i in 1:72){
print(i)
R2[[i]] <- numeric(20)
for(k in 1:20){
print(k)
R2[[i]][k] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 100,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
}
warnings()
96*.75
24/3
set.seed(1)
for(i in 1:72){
print(i)
R2[[i]] <- numeric(20)
for(k in 1:20){
print(k)
R2[[i]][k] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 96,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
}
lapply(X = R2, FUN = mean
)
set.seed(1)
for(i in 1:72){
print(i)
R2[[i]] <- numeric(50)
for(k in 1:50){
print(k)
R2[[i]][k] <- PopR2Entropy(model      = model,
step1model = S1,
nclus      = design[i, "nclus"],
ngroups    = 192,
reg_coeff  = design[i, "coeff"],
N_g        = design[i, "N_g"],
balance    = design[i, "balance"],
sd         = design[i, "sd"])
}
}
mean(R2)
lapply(X = R2, FUN = mean)
51*700
51*800
library(lavaan)
library(qwraps2)
library(fpp3)
library(dplyr)
library(xtable)
library(ggpubr)
library(ggplot2)
library(ggthemes)
# library(Cairo)
# CairoWin()
# Set wd
setwd("~/GitHub/ModelSelection_Simulation/Results")
# Load empty final results matrix
load("FinalResults.Rdata")
colnames(Results_final)[1:13] <- c("entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
load("design.Rdata")
# Merge datasets
design$Condition <- as.numeric(rownames(design))
Results_final <- merge(x = design, y = Results_final, by = "Condition")
col_order <- c("Condition", "Replication", "nclus", "ngroups", "coeff", "N_g", "balance", "sd",
"entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
Results_final <- Results_final[, col_order]
rm(col_order)
# Fill in the matrix with all results
ncond <- unique(Results_final$Condition) # How many conditions?
K <- length(unique(Results_final$Replication)) # How many replications?
for (i in ncond) {
test <- NA
test <- try(load(paste0("ResultRow", i, ".Rdata")))
if(!c(class(test) == "try-error")){
Results_final[(K*(i-1)+1):(i*K), 9:21] <- ResultsRow
}
}
# remove uncomplete entries
Results_final <- Results_final[!is.na(Results_final$BIC_G), ]
# Turn NAs from Chull into FALSE input (Chull was not able to select any model)
# apply(X = apply(X = Results_final, MARGIN = 2, FUN = is.na), MARGIN = 2, FUN = sum)
# Results_final$`Chull Scree` <- ifelse(test = is.na(Results_final$`Chull Scree`), yes = FALSE, no = Results_final$`Chull Scree`)
# Transform to factor
# changed <- Results_final %>% dplyr::select(Chull:ICL_fac) %>% as.matrix() %>% as.data.frame() %>%
#   mutate(
#     Chull     = recode(Chull, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     BIC_G     = recode(BIC_G, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     BIC_N     = recode(BIC_N, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     AIC       = recode(AIC, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     AIC3      = recode(AIC3, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     ICL       = recode(ICL, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     Chull_fac = recode(Chull_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     BIC_G_fac = recode(BIC_G_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     BIC_N_fac = recode(BIC_N_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     AIC_fac   = recode(AIC_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     AIC3_fac  = recode(AIC3_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     ICL_fac   = recode(ICL_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1")
#   )
measures <- Results_final %>% dplyr::select(Chull:ICL_fac) %>% as.matrix() %>% as.data.frame()
measures <- lapply(X = measures, FUN = factor, levels = c("-1", "0", "1"), labels = c("Under", "Correct", "Over")) %>% as.data.frame()
Results_final[, 10:21] <- measures
Results_final[, "entropyR2"] <- as.numeric(Results_final[, "entropyR2"])
# TABLES
K_res   <- count_results(data = Results_final, by = c("nclus"), type = "relative")   %>% select(nclus:ICL)
N_res   <- count_results(data = Results_final, by = c("N_g"), type = "relative")     %>% select(N_g:ICL)
####################################################################################################
############################ TABLES - CLUSTER AND PARAMETER RECOVERY ###############################
####################################################################################################
# Check mean results per simulation factor
# Create a function for this
count_results <- function(data, by, type = "count"){
# Extract necessary columns
reduced <- data %>% dplyr::select(Chull:ICL_fac)
#Initialize objects to store
counted        <- vector(mode = "list", length = ncol(reduced))
names(counted) <- colnames(reduced)
final <- c()
# browser()
# Count per column
for(i in 1:ncol(reduced)){
if(length(by) == 1 && by == "total"){
counted[[i]] <- data %>% count(get(colnames(reduced)[i]), .drop = F) %>% filter(!is.na(`get(colnames(reduced)[i])`)) # Count and remove NA
if(type == "relative"){
counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]]), drop = F]/sum(counted[[i]][, ncol(counted[[i]]), drop = F]), 3)
}
# browser()
colnames(counted[[i]]) <- c("result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, 1, drop = F], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
} else {
# browser()
counted[[i]] <- data %>% group_by(across(all_of(by))) %>% count(get(colnames(reduced)[i]), .drop = F) %>% filter(!is.na(`get(colnames(reduced)[i])`)) # count per measure
# browser()
if(type == "relative"){
counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]])]/sum(counted[[i]][1:3, ncol(counted[[i]])]), 3)
}
colnames(counted[[i]]) <- c(by, "result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, c(seq_len(length(by)), (length(by) + 1))], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
}
}
return(final)
}
K_res   <- count_results(data = Results_final, by = c("nclus"), type = "relative")   %>% select(nclus:ICL)
N_res   <- count_results(data = Results_final, by = c("N_g"), type = "relative")     %>% select(N_g:ICL)
G_res   <- count_results(data = Results_final, by = c("ngroups"), type = "relative") %>% select(ngroups:ICL)
B_res   <- count_results(data = Results_final, by = c("coeff"), type = "relative")   %>% select(coeff:ICL)
Bal_res <- count_results(data = Results_final, by = c("balance"), type = "relative") %>% select(balance:ICL)
sd_res  <- count_results(data = Results_final, by = c("sd"), type = "relative")      %>% select(sd:ICL)
K_res
N_res
K_res %>% pivot_longer(cols = -c(nclus, result), names_to = "metric", values_to = "value")
K_res %>% pivot_longer(cols = -c(nclus, result), names_to = "metric", values_to = "value") %>% pivot_wider(names_from = nclus, values_from = value, names_prefix = "nclus")
K_res   <- K_res %>%
pivot_longer(cols = -c(nclus, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = nclus, values_from = value, names_prefix = "nclus")
N_res   <- N_res %>%
pivot_longer(cols = -c(N_g, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = N_g, values_from = value, names_prefix = "N_g")
G_res   <- G_res %>%
pivot_longer(cols = -c(ngroups, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = ngroups, values_from = value, names_prefix = "ngroups")
B_res   <- B_res %>%
pivot_longer(cols = -c(coeff, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = coeff, values_from = value, names_prefix = "coeff")
Bal_res <- Bal_res %>%
pivot_longer(cols = -c(balance, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = balance, values_from = value, names_prefix = "balance")
sd_res  <- sd_res %>%
pivot_longer(cols = -c(sd, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = sd, values_from = value, names_prefix = "sd")
K_res
K_res   <- K_res %>%
pivot_longer(cols = -c(nclus, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = nclus, values_from = value, names_prefix = "nclus") %>% relocate(metric)
# TABLES
K_res   <- count_results(data = Results_final, by = c("nclus"), type = "relative")   %>% select(nclus:ICL)
K_res   <- K_res %>%
pivot_longer(cols = -c(nclus, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = nclus, values_from = value, names_prefix = "nclus") %>% relocate(metric)
K_res
K_res   <- count_results(data = Results_final, by = c("nclus"), type = "relative")   %>% select(nclus:ICL)
N_res   <- count_results(data = Results_final, by = c("N_g"), type = "relative")     %>% select(N_g:ICL)
G_res   <- count_results(data = Results_final, by = c("ngroups"), type = "relative") %>% select(ngroups:ICL)
B_res   <- count_results(data = Results_final, by = c("coeff"), type = "relative")   %>% select(coeff:ICL)
Bal_res <- count_results(data = Results_final, by = c("balance"), type = "relative") %>% select(balance:ICL)
sd_res  <- count_results(data = Results_final, by = c("sd"), type = "relative")      %>% select(sd:ICL)
K_res   <- K_res %>%
pivot_longer(cols = -c(nclus, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = nclus, values_from = value, names_prefix = "nclus") %>%
relocate(metric) %>% arrange(metric)
N_res   <- N_res %>%
pivot_longer(cols = -c(N_g, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = N_g, values_from = value, names_prefix = "N_g") %>%
relocate(metric) %>% arrange(metric)
G_res   <- G_res %>%
pivot_longer(cols = -c(ngroups, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = ngroups, values_from = value, names_prefix = "ngroups") %>%
relocate(metric) %>% arrange(metric)
B_res   <- B_res %>%
pivot_longer(cols = -c(coeff, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = coeff, values_from = value, names_prefix = "coeff") %>%
relocate(metric) %>% arrange(metric)
Bal_res <- Bal_res %>%
pivot_longer(cols = -c(balance, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = balance, values_from = value, names_prefix = "balance") %>%
relocate(metric) %>% arrange(metric)
sd_res  <- sd_res %>%
pivot_longer(cols = -c(sd, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = sd, values_from = value, names_prefix = "sd") %>%
relocate(metric) %>% arrange(metric)
K_res
sd_res
N_res   <- count_results(data = Results_final, by = c("N_g"), type = "relative")     %>% select(N_g:ICL)
N_res   <- N_res %>%
pivot_longer(cols = -c(N_g, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = N_g, values_from = value, names_prefix = "N_g") %>%
relocate(metric) %>% arrange(metric) %>% select(contains(N_g))
N_res   <- N_res %>%
pivot_longer(cols = -c(N_g, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = N_g, values_from = value, names_prefix = "N_g") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("N_g"))
N_res
# TABLES
K_res   <- count_results(data = Results_final, by = c("nclus"), type = "relative")   %>% select(nclus:ICL)
N_res   <- count_results(data = Results_final, by = c("N_g"), type = "relative")     %>% select(N_g:ICL)
G_res   <- count_results(data = Results_final, by = c("ngroups"), type = "relative") %>% select(ngroups:ICL)
B_res   <- count_results(data = Results_final, by = c("coeff"), type = "relative")   %>% select(coeff:ICL)
Bal_res <- count_results(data = Results_final, by = c("balance"), type = "relative") %>% select(balance:ICL)
sd_res  <- count_results(data = Results_final, by = c("sd"), type = "relative")      %>% select(sd:ICL)
K_res   <- K_res %>%
pivot_longer(cols = -c(nclus, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = nclus, values_from = value, names_prefix = "nclus") %>%
relocate(metric) %>% arrange(metric)
N_res   <- N_res %>%
pivot_longer(cols = -c(N_g, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = N_g, values_from = value, names_prefix = "N_g") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("N_g"))
G_res   <- G_res %>%
pivot_longer(cols = -c(ngroups, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = ngroups, values_from = value, names_prefix = "ngroups") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("ngroups"))
B_res   <- B_res %>%
pivot_longer(cols = -c(coeff, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = coeff, values_from = value, names_prefix = "coeff") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("coeff"))
Bal_res <- Bal_res %>%
pivot_longer(cols = -c(balance, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = balance, values_from = value, names_prefix = "balance") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("balance"))
sd_res  <- sd_res %>%
pivot_longer(cols = -c(sd, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = sd, values_from = value, names_prefix = "sd") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("sd"))
final <- cbind(K_res, N_res, G_res, B_res, Bal_res, sd_res)
final
