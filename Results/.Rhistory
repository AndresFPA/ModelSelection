sd        = Design[RowDesign, "sd"])
# Run model selection from 1 to 6 clusters
# 1. BOTH RES AND LOAD NON-INV ARE INCLUDED
results <- ModelSelection(dat = SimData$SimData, step1model = S1, step2model = S2,
group = "group", clusters = c(1, 6), nstarts = 25, seed = (RowDesign * k),
constraints = "loadings", allG = T, fit = "factors", NonInv = NonInv)
# If everything goes right, return results
return(results)
}, error = function(e){
return(NULL)
})
}
# Main simulation function
do_sim <- function(Design, RowDesign, K){
# Create the original clustering matrix for comparison below
original <- create_original(balance = Design[RowDesign, "balance"],
ngroups = Design[RowDesign, "ngroups"],
nclus = Design[RowDesign, "nclus"])
# Create matrix to store results
# 12 columns for: BIC_G, BIC_N, AIC, AIC3, Chull, ICL
# There are 2 columns for each model selection measure (for factors and observed LL)
ResultsRow <- matrix(data = NA, nrow = (K), ncol = 13)
ResultsRow_ignored <- matrix(data = NA, nrow = (K), ncol = 13)
# Create second matrix for the ARI
ResultsRowARI <- matrix(data = NA, nrow = (K), ncol = 2)
ResultsRowARI_ignored <- matrix(data = NA, nrow = (K), ncol = 2)
for(k in 1:K){
print(paste("Replication", k, "out of", K))
# Code to re-sample in case the covariance matrix is non positive definite
attempts <- 10
for(j in 1:attempts){
# Seed will change if there is an error
ctimes <- system.time(results <- genDat_analysis(seed = (RowDesign * k * j), Design = Design, RowDesign = RowDesign, k = k, NonInv = NonInv))
ctimes_ignored <- system.time(results_ignored <- genDat_analysis(seed = (RowDesign * k * j), Design = Design, RowDesign = RowDesign, k = k, NonInv = NULL))
if(!is.null(results)){
# If there was no error, break the loop and continue
break
}
}
# Save computation times
save(ctimes, file = paste("Times/Time", "Row", RowDesign, "Rep", k, ".Rdata", sep = ""))
save(ctimes_ignored, file = paste("Times/TimeIgn", "Row", RowDesign, "Rep", k, ".Rdata", sep = ""))
# Save results if necessary
results <- results$Overview
save(results, file = paste("Fit/Fit", "Row", RowDesign, "Rep", k, "-", j, ".Rdata" , sep = ""))
results_ignored <- results_ignored$Overview
save(results_ignored, file = paste("Fit/FitIgn", "Row", RowDesign, "Rep", k, "-", j, ".Rdata" , sep = ""))
# ---------------------------------------------------------------
# Evaluate the results
Evaluated            <- evaluation(res = results, clus = Design[RowDesign, "nclus"])
Evaluated_ignored    <- evaluation(res = results, clus = Design[RowDesign, "nclus"])
EvaluatedARI         <- evaluationARI(z_gks    = results$Models[[Design[RowDesign, "nclus"]]]$posteriors,
original = original,
nclus    = Design[RowDesign, "nclus"])
EvaluatedARI_ignored <- evaluationARI(z_gks    = results$Models[[Design[RowDesign, "nclus"]]]$posteriors,
original = original,
nclus    = Design[RowDesign, "nclus"])
# Store the results
colnames(ResultsRow) <- colnames(Evaluated); colnames(ResultsRow_ignored) <- colnames(Evaluated_ignored)
ResultsRow[k, ]      <- unlist(Evaluated);   ResultsRow_ignored[k, ]      <- unlist(Evaluated_ignored)
colnames(ResultsRowARI) <- c("ARI", "CC");  colnames(ResultsRowARI_ignored) <- c("ARI", "CC")
ResultsRowARI[k, ] <- unlist(EvaluatedARI); ResultsRowARI_ignored[k, ] <- unlist(EvaluatedARI_ignored)
}
# Save the results for each row
save(ResultsRow, file = paste("Result", "Row", RowDesign,".Rdata" , sep =""))
save(ResultsRow_ignored, file = paste("ResultIgn", "Row", RowDesign,".Rdata" , sep =""))
save(ResultsRowARI, file = paste("Result", "Row", "ARI", RowDesign,".Rdata" , sep =""))
save(ResultsRowARI_ignored, file = paste("Result_Ign", "Row", "ARI", RowDesign,".Rdata" , sep =""))
# Return the final results
return(ResultsRow)
}
# Functions for the simulation
# First, to avoid stopping due to errors, create a function with data generation and MMGSEM
# Errors come from non positive definite cov matrices. This code allows the re-sample
genDat_analysis <- function(seed, Design, RowDesign, k, NonInv){
# browser()
tryCatch({
# Set seed per design condition (row) and replication (K)
set.seed(seed)
# Generate data
#SimData <- do.call(what = DataGeneration, args = Design[RowDesign, ])$SimData
SimData <- DataGeneration(model     = Design[RowDesign, "model"],
nclus     = Design[RowDesign, "nclus"],
ngroups   = Design[RowDesign, "ngroups"],
reg_coeff = Design[RowDesign, "coeff"],
N_g       = Design[RowDesign, "N_g"],
balance   = Design[RowDesign, "balance"],
sd        = Design[RowDesign, "sd"])
# Run model selection from 1 to 6 clusters
# 1. BOTH RES AND LOAD NON-INV ARE INCLUDED
results <- ModelSelection(dat = SimData$SimData, step1model = S1, step2model = S2,
group = "group", clusters = c(1, 6), nstarts = 25, seed = (RowDesign * k),
constraints = "loadings", allG = T, fit = "factors", NonInv = NonInv)
# If everything goes right, return results
return(results)
}, error = function(e){
return(NULL)
})
}
# Main simulation function
do_sim <- function(Design, RowDesign, K){
# Create the original clustering matrix for comparison below
original <- create_original(balance = Design[RowDesign, "balance"],
ngroups = Design[RowDesign, "ngroups"],
nclus = Design[RowDesign, "nclus"])
# Create matrix to store results
# 12 columns for: BIC_G, BIC_N, AIC, AIC3, Chull, ICL
# There are 2 columns for each model selection measure (for factors and observed LL)
ResultsRow <- matrix(data = NA, nrow = (K), ncol = 13)
ResultsRow_ignored <- matrix(data = NA, nrow = (K), ncol = 13)
# Create second matrix for the ARI
ResultsRowARI <- matrix(data = NA, nrow = (K), ncol = 2)
ResultsRowARI_ignored <- matrix(data = NA, nrow = (K), ncol = 2)
# Define non-invariances
NonInv <- c("F1 =~ x2", "F1 =~ x3",
"F2 =~ z2", "F2 =~ z3",
"F3 =~ m2", "F3 =~ m3",
"F4 =~ y2", "F4 =~ y3")
for(k in 1:K){
print(paste("Replication", k, "out of", K))
# Code to re-sample in case the covariance matrix is non positive definite
attempts <- 10
for(j in 1:attempts){
# Seed will change if there is an error
ctimes <- system.time(results <- genDat_analysis(seed = (RowDesign * k * j), Design = Design, RowDesign = RowDesign, k = k, NonInv = NonInv))
ctimes_ignored <- system.time(results_ignored <- genDat_analysis(seed = (RowDesign * k * j), Design = Design, RowDesign = RowDesign, k = k, NonInv = NULL))
if(!is.null(results)){
# If there was no error, break the loop and continue
break
}
}
# Save computation times
save(ctimes, file = paste("Times/Time", "Row", RowDesign, "Rep", k, ".Rdata", sep = ""))
save(ctimes_ignored, file = paste("Times/TimeIgn", "Row", RowDesign, "Rep", k, ".Rdata", sep = ""))
# Save results if necessary
results <- results$Overview
save(results, file = paste("Fit/Fit", "Row", RowDesign, "Rep", k, "-", j, ".Rdata" , sep = ""))
results_ignored <- results_ignored$Overview
save(results_ignored, file = paste("Fit/FitIgn", "Row", RowDesign, "Rep", k, "-", j, ".Rdata" , sep = ""))
# ---------------------------------------------------------------
# Evaluate the results
Evaluated            <- evaluation(res = results, clus = Design[RowDesign, "nclus"])
Evaluated_ignored    <- evaluation(res = results, clus = Design[RowDesign, "nclus"])
EvaluatedARI         <- evaluationARI(z_gks    = results$Models[[Design[RowDesign, "nclus"]]]$posteriors,
original = original,
nclus    = Design[RowDesign, "nclus"])
EvaluatedARI_ignored <- evaluationARI(z_gks    = results$Models[[Design[RowDesign, "nclus"]]]$posteriors,
original = original,
nclus    = Design[RowDesign, "nclus"])
# Store the results
colnames(ResultsRow) <- colnames(Evaluated); colnames(ResultsRow_ignored) <- colnames(Evaluated_ignored)
ResultsRow[k, ]      <- unlist(Evaluated);   ResultsRow_ignored[k, ]      <- unlist(Evaluated_ignored)
colnames(ResultsRowARI) <- c("ARI", "CC");  colnames(ResultsRowARI_ignored) <- c("ARI", "CC")
ResultsRowARI[k, ] <- unlist(EvaluatedARI); ResultsRowARI_ignored[k, ] <- unlist(EvaluatedARI_ignored)
}
# Save the results for each row
save(ResultsRow, file = paste("Result", "Row", RowDesign,".Rdata" , sep =""))
save(ResultsRow_ignored, file = paste("ResultIgn", "Row", RowDesign,".Rdata" , sep =""))
save(ResultsRowARI, file = paste("Result", "Row", "ARI", RowDesign,".Rdata" , sep =""))
save(ResultsRowARI_ignored, file = paste("Result_Ign", "Row", "ARI", RowDesign,".Rdata" , sep =""))
# Return the final results
return(ResultsRow)
}
getwd()
# Create final results matrix
# Everything is multiplied by 2 because we run the model twice (including and not including Non-Inv)
K <- 1 # Number of replications per condition
Results_final <- as.data.frame(matrix(data = NA, nrow = nrow(design)*K, ncol = 13))
Results_final$Replication <- rep(x = 1:K, times = nrow(design))
Results_final$Condition <- rep(x = 1:nrow(design), each = K)
system.time(for(i in 1:20){
cat("\n", "Condition", i, "out of", nrow(design), "\n")
Results <- do_sim(Design = design, RowDesign = i, K = K)
Results_final[(K*(i-1)+1):(i*K), 1:13] <- Results
})
system.time(for(i in 1:1){
cat("\n", "Condition", i, "out of", nrow(design), "\n")
Results <- do_sim(Design = design, RowDesign = i, K = K)
Results_final[(K*(i-1)+1):(i*K), 1:13] <- Results
})
# Main simulation function
do_sim <- function(Design, RowDesign, K){
# Create the original clustering matrix for comparison below
original <- create_original(balance = Design[RowDesign, "balance"],
ngroups = Design[RowDesign, "ngroups"],
nclus = Design[RowDesign, "nclus"])
# Create matrix to store results
# 12 columns for: BIC_G, BIC_N, AIC, AIC3, Chull, ICL
# There are 2 columns for each model selection measure (for factors and observed LL)
ResultsRow <- matrix(data = NA, nrow = (K), ncol = 13)
ResultsRow_ignored <- matrix(data = NA, nrow = (K), ncol = 13)
# Create second matrix for the ARI
ResultsRowARI <- matrix(data = NA, nrow = (K), ncol = 2)
ResultsRowARI_ignored <- matrix(data = NA, nrow = (K), ncol = 2)
# Define non-invariances
NonInv <- c("F1 =~ x2", "F1 =~ x3",
"F2 =~ z2", "F2 =~ z3",
"F3 =~ m2", "F3 =~ m3",
"F4 =~ y2", "F4 =~ y3")
for(k in 1:K){
print(paste("Replication", k, "out of", K))
# Code to re-sample in case the covariance matrix is non positive definite
attempts <- 10
for(j in 1:attempts){
# Seed will change if there is an error
ctimes <- system.time(results <- genDat_analysis(seed = (RowDesign * k * j), Design = Design, RowDesign = RowDesign, k = k, NonInv = NonInv))
ctimes_ignored <- system.time(results_ignored <- genDat_analysis(seed = (RowDesign * k * j), Design = Design, RowDesign = RowDesign, k = k, NonInv = NULL))
if(!is.null(results)){
# If there was no error, break the loop and continue
break
}
}
# # Save computation times
# save(ctimes, file = paste("Times/Time", "Row", RowDesign, "Rep", k, ".Rdata", sep = ""))
# save(ctimes_ignored, file = paste("Times/TimeIgn", "Row", RowDesign, "Rep", k, ".Rdata", sep = ""))
#
# # Save results if necessary
# results <- results$Overview
# save(results, file = paste("Fit/Fit", "Row", RowDesign, "Rep", k, "-", j, ".Rdata" , sep = ""))
#
# results_ignored <- results_ignored$Overview
# save(results_ignored, file = paste("Fit/FitIgn", "Row", RowDesign, "Rep", k, "-", j, ".Rdata" , sep = ""))
# ---------------------------------------------------------------
# Evaluate the results
Evaluated            <- evaluation(res = results, clus = Design[RowDesign, "nclus"])
Evaluated_ignored    <- evaluation(res = results, clus = Design[RowDesign, "nclus"])
EvaluatedARI         <- evaluationARI(z_gks    = results$Models[[Design[RowDesign, "nclus"]]]$posteriors,
original = original,
nclus    = Design[RowDesign, "nclus"])
EvaluatedARI_ignored <- evaluationARI(z_gks    = results$Models[[Design[RowDesign, "nclus"]]]$posteriors,
original = original,
nclus    = Design[RowDesign, "nclus"])
# Store the results
colnames(ResultsRow) <- colnames(Evaluated); colnames(ResultsRow_ignored) <- colnames(Evaluated_ignored)
ResultsRow[k, ]      <- unlist(Evaluated);   ResultsRow_ignored[k, ]      <- unlist(Evaluated_ignored)
colnames(ResultsRowARI) <- c("ARI", "CC");  colnames(ResultsRowARI_ignored) <- c("ARI", "CC")
ResultsRowARI[k, ] <- unlist(EvaluatedARI); ResultsRowARI_ignored[k, ] <- unlist(EvaluatedARI_ignored)
}
# Save the results for each row
save(ResultsRow, file = paste("Result", "Row", RowDesign,".Rdata" , sep =""))
save(ResultsRow_ignored, file = paste("ResultIgn", "Row", RowDesign,".Rdata" , sep =""))
save(ResultsRowARI, file = paste("Result", "Row", "ARI", RowDesign,".Rdata" , sep =""))
save(ResultsRowARI_ignored, file = paste("Result_Ign", "Row", "ARI", RowDesign,".Rdata" , sep =""))
# Return the final results
return(ResultsRow)
}
system.time(for(i in 1:1){
cat("\n", "Condition", i, "out of", nrow(design), "\n")
Results <- do_sim(Design = design, RowDesign = i, K = K)
Results_final[(K*(i-1)+1):(i*K), 1:13] <- Results
})
load("C:/Users/perezalo/Documents/GitHub/ModelSelection_Simulation/ResultRow1.Rdata")
View(ResultsRow)
load("C:/Users/perezalo/Documents/GitHub/ModelSelection_Simulation/ResultIgnRow1.Rdata")
View(ResultsRow_ignored)
View(ResultsRow)
load("C:/Users/perezalo/Documents/GitHub/ModelSelection_Simulation/ResultIgnRow1.Rdata")
load("C:/Users/perezalo/Documents/GitHub/ModelSelection_Simulation/Result_IgnRowARI1.Rdata")
View(ResultsRowARI_ignored)
# Main simulation function
do_sim <- function(Design, RowDesign, K){
# Create the original clustering matrix for comparison below
original <- create_original(balance = Design[RowDesign, "balance"],
ngroups = Design[RowDesign, "ngroups"],
nclus = Design[RowDesign, "nclus"])
# Create matrix to store results
# 12 columns for: BIC_G, BIC_N, AIC, AIC3, Chull, ICL
# There are 2 columns for each model selection measure (for factors and observed LL)
ResultsRow <- matrix(data = NA, nrow = (K), ncol = 13)
ResultsRow_ignored <- matrix(data = NA, nrow = (K), ncol = 13)
# Create second matrix for the ARI
ResultsRowARI <- matrix(data = NA, nrow = (K), ncol = 2)
ResultsRowARI_ignored <- matrix(data = NA, nrow = (K), ncol = 2)
# Define non-invariances
NonInv <- c("F1 =~ x2", "F1 =~ x3",
"F2 =~ z2", "F2 =~ z3",
"F3 =~ m2", "F3 =~ m3",
"F4 =~ y2", "F4 =~ y3")
for(k in 1:K){
print(paste("Replication", k, "out of", K))
# Code to re-sample in case the covariance matrix is non positive definite
attempts <- 10
for(j in 1:attempts){
# Seed will change if there is an error
ctimes <- system.time(results <- genDat_analysis(seed = (RowDesign * k * j), Design = Design, RowDesign = RowDesign, k = k, NonInv = NonInv))
ctimes_ignored <- system.time(results_ignored <- genDat_analysis(seed = (RowDesign * k * j), Design = Design, RowDesign = RowDesign, k = k, NonInv = NULL))
if(!is.null(results)){
# If there was no error, break the loop and continue
break
}
}
# # Save computation times
# save(ctimes, file = paste("Times/Time", "Row", RowDesign, "Rep", k, ".Rdata", sep = ""))
# save(ctimes_ignored, file = paste("Times/TimeIgn", "Row", RowDesign, "Rep", k, ".Rdata", sep = ""))
#
# # Save results if necessary
# results <- results$Overview
# save(results, file = paste("Fit/Fit", "Row", RowDesign, "Rep", k, "-", j, ".Rdata" , sep = ""))
#
# results_ignored <- results_ignored$Overview
# save(results_ignored, file = paste("Fit/FitIgn", "Row", RowDesign, "Rep", k, "-", j, ".Rdata" , sep = ""))
# ---------------------------------------------------------------
# Evaluate the results
Evaluated            <- evaluation(res = results, clus = Design[RowDesign, "nclus"])
Evaluated_ignored    <- evaluation(res = results, clus = Design[RowDesign, "nclus"])
EvaluatedARI         <- evaluationARI(z_gks    = results$Models[[Design[RowDesign, "nclus"]]]$posteriors,
original = original,
nclus    = Design[RowDesign, "nclus"])
EvaluatedARI_ignored <- evaluationARI(z_gks    = results$Models[[Design[RowDesign, "nclus"]]]$posteriors,
original = original,
nclus    = Design[RowDesign, "nclus"])
# Store the results
colnames(ResultsRow) <- colnames(Evaluated); colnames(ResultsRow_ignored) <- colnames(Evaluated_ignored)
ResultsRow[k, ]      <- unlist(Evaluated);   ResultsRow_ignored[k, ]      <- unlist(Evaluated_ignored)
colnames(ResultsRowARI) <- c("ARI", "CC");  colnames(ResultsRowARI_ignored) <- c("ARI", "CC")
ResultsRowARI[k, ] <- unlist(EvaluatedARI); ResultsRowARI_ignored[k, ] <- unlist(EvaluatedARI_ignored)
}
# Save the results for each row
save(ResultsRow, file = paste("Result", "Row", RowDesign,".Rdata" , sep =""))
save(ResultsRow_ignored, file = paste("ResultIgn", "Row", RowDesign,".Rdata" , sep =""))
save(ResultsRowARI, file = paste("Result", "Row", "ARI", RowDesign,".Rdata" , sep =""))
save(ResultsRowARI_ignored, file = paste("Result_Ign", "Row", "ARI", RowDesign,".Rdata" , sep =""))
browser()
# Return the final results
return(ResultsRow)
}
system.time(for(i in 1:1){
cat("\n", "Condition", i, "out of", nrow(design), "\n")
Results <- do_sim(Design = design, RowDesign = i, K = K)
Results_final[(K*(i-1)+1):(i*K), 1:13] <- Results
})
results$Overview
results_ignored$Overview
library(lavaan)
library(qwraps2)
library(fpp3)
library(dplyr)
library(xtable)
library(ggpubr)
library(ggplot2)
library(ggthemes)
# library(Cairo)
# CairoWin()
# Set wd
setwd("~/GitHub/ModelSelection_Simulation/Results")
# Load empty final results matrix
load("FinalResults.Rdata")
colnames(Results_final)[1:13] <- c("entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
load("design.Rdata")
# Merge datasets
design$Condition <- as.numeric(rownames(design))
Results_final <- merge(x = design, y = Results_final, by = "Condition")
col_order <- c("Condition", "Replication", "nclus", "ngroups", "coeff", "N_g", "balance", "sd",
"entropyR2", "Chull", "BIC_G", "BIC_N", "AIC", "AIC3", "ICL",
"Chull_fac", "BIC_G_fac", "BIC_N_fac", "AIC_fac", "AIC3_fac", "ICL_fac")
Results_final <- Results_final[, col_order]
rm(col_order)
# Fill in the matrix with all results
ncond <- unique(Results_final$Condition) # How many conditions?
K <- length(unique(Results_final$Replication)) # How many replications?
for (i in ncond) {
test <- NA
test <- try(load(paste0("ResultRow", i, ".Rdata")))
if(!c(class(test) == "try-error")){
Results_final[(K*(i-1)+1):(i*K), 9:21] <- ResultsRow
}
}
# remove uncomplete entries
Results_final <- Results_final[!is.na(Results_final$BIC_G), ]
# Turn NAs from Chull into FALSE input (Chull was not able to select any model)
# apply(X = apply(X = Results_final, MARGIN = 2, FUN = is.na), MARGIN = 2, FUN = sum)
# Results_final$`Chull Scree` <- ifelse(test = is.na(Results_final$`Chull Scree`), yes = FALSE, no = Results_final$`Chull Scree`)
# Transform to factor
# changed <- Results_final %>% dplyr::select(Chull:ICL_fac) %>% as.matrix() %>% as.data.frame() %>%
#   mutate(
#     Chull     = recode(Chull, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     BIC_G     = recode(BIC_G, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     BIC_N     = recode(BIC_N, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     AIC       = recode(AIC, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     AIC3      = recode(AIC3, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     ICL       = recode(ICL, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     Chull_fac = recode(Chull_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     BIC_G_fac = recode(BIC_G_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     BIC_N_fac = recode(BIC_N_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     AIC_fac   = recode(AIC_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     AIC3_fac  = recode(AIC3_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1"),
#     ICL_fac   = recode(ICL_fac, "1" = "0", "TRUE" = "0", "over" = "1", "under" = "-1")
#   )
measures <- Results_final %>% dplyr::select(Chull:ICL_fac) %>% as.matrix() %>% as.data.frame()
measures <- lapply(X = measures, FUN = factor, levels = c("-1", "0", "1"), labels = c("Under", "Correct", "Over")) %>% as.data.frame()
Results_final[, 10:21] <- measures
Results_final[, "entropyR2"] <- as.numeric(Results_final[, "entropyR2"])
####################################################################################################
############################ TABLES - CLUSTER AND PARAMETER RECOVERY ###############################
####################################################################################################
# Check mean results per simulation factor
# Create a function for this
count_results <- function(data, by, type = "count"){
# Extract necessary columns
reduced <- data %>% dplyr::select(Chull:ICL_fac)
#Initialize objects to store
counted        <- vector(mode = "list", length = ncol(reduced))
names(counted) <- colnames(reduced)
final <- c()
# browser()
# Count per column
for(i in 1:ncol(reduced)){
if(length(by) == 1 && by == "total"){
counted[[i]] <- data %>% count(get(colnames(reduced)[i]), .drop = F) %>% filter(!is.na(`get(colnames(reduced)[i])`)) # Count and remove NA
if(type == "relative"){
counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]]), drop = F]/sum(counted[[i]][, ncol(counted[[i]]), drop = F]), 3)
}
# browser()
colnames(counted[[i]]) <- c("result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, 1, drop = F], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
} else {
# browser()
counted[[i]] <- data %>% group_by(across(all_of(by))) %>% count(get(colnames(reduced)[i]), .drop = F) %>% filter(!is.na(`get(colnames(reduced)[i])`)) # count per measure
# browser()
if(type == "relative"){
counted[[i]][, ncol(counted[[i]])] <- round(counted[[i]][, ncol(counted[[i]])]/sum(counted[[i]][1:3, ncol(counted[[i]])]), 3)
}
colnames(counted[[i]]) <- c(by, "result", colnames(reduced)[i]) # change colnames
ifelse(test = i == 1, yes = final <- counted[[i]][, c(seq_len(length(by)), (length(by) + 1))], no = final <- final) # for the first iteration, keep the group variable and results column
final <- cbind(final, counted[[i]][, ncol(counted[[i]]), drop = F]) # Add the results for each measure
}
}
return(final)
}
# Pre-check to know if there are NAs
colSums(apply(Results_final, 2, is.na))
# Main effects
count_results(data = Results_final, by = "total", type = "relative")
K_res   <- count_results(data = Results_final, by = c("nclus"), type = "relative")
N_res   <- count_results(data = Results_final, by = c("N_g"), type = "relative")
G_res   <- count_results(data = Results_final, by = c("ngroups"), type = "relative")
B_res   <- count_results(data = Results_final, by = c("coeff"), type = "relative")
Bal_res <- count_results(data = Results_final, by = c("balance"), type = "relative")
sd_res  <- count_results(data = Results_final, by = c("sd"), type = "relative")
count_results(data = Results_final, by = c("sd", "N_g"), type = "relative")
mean(Results_final$entropyR2)
View(Results_final %>% group_by(nclus, N_g, ngroups, coeff, balance, sd) %>% summarise(across(entropyR2, mean)))
Results_final %>% group_by(nclus) %>% summarise(across(entropyR2, mean))
Results_final %>% group_by(N_g) %>% summarise(across(entropyR2, mean))
Results_final %>% group_by(ngroups) %>% summarise(across(entropyR2, mean))
Results_final %>% group_by(coeff) %>% summarise(across(entropyR2, mean))
Results_final %>% group_by(balance) %>% summarise(across(entropyR2, mean))
Results_final %>% group_by(sd) %>% summarise(across(entropyR2, mean))
K_res   <- count_results(data = Results_final, by = c("nclus"), type = "relative")   %>% select(nclus:ICL)
N_res   <- count_results(data = Results_final, by = c("N_g"), type = "relative")     %>% select(N_g:ICL)
G_res   <- count_results(data = Results_final, by = c("ngroups"), type = "relative") %>% select(ngroups:ICL)
B_res   <- count_results(data = Results_final, by = c("coeff"), type = "relative")   %>% select(coeff:ICL)
Bal_res <- count_results(data = Results_final, by = c("balance"), type = "relative") %>% select(balance:ICL)
sd_res  <- count_results(data = Results_final, by = c("sd"), type = "relative")      %>% select(sd:ICL)
K_res   <- K_res %>%
pivot_longer(cols = -c(nclus, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = nclus, values_from = value, names_prefix = "nclus") %>%
relocate(metric) %>% arrange(metric)
N_res   <- N_res %>%
pivot_longer(cols = -c(N_g, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = N_g, values_from = value, names_prefix = "N_g") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("N_g"))
G_res   <- G_res %>%
pivot_longer(cols = -c(ngroups, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = ngroups, values_from = value, names_prefix = "ngroups") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("ngroups"))
B_res   <- B_res %>%
pivot_longer(cols = -c(coeff, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = coeff, values_from = value, names_prefix = "coeff") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("coeff"))
Bal_res <- Bal_res %>%
pivot_longer(cols = -c(balance, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = balance, values_from = value, names_prefix = "balance") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("balance"))
sd_res  <- sd_res %>%
pivot_longer(cols = -c(sd, result), names_to = "metric", values_to = "value") %>%
pivot_wider(names_from = sd, values_from = value, names_prefix = "sd") %>%
relocate(metric) %>% arrange(metric) %>% select(contains("sd"))
final <- cbind(K_res, N_res, G_res, B_res, Bal_res, sd_res)
final
final
count_results(data = Results_final, by = "total", type = "relative") %>% select(result:ICL)
total   <- count_results(data = Results_final, by = "total", type = "relative")      %>% select(result:ICL)
to_res
to_res  <- count_results(data = Results_final, by = "total", type = "relative")      %>% select(result:ICL)
to_res %>%
pivot_longer(cols = -c(result), names_to = "metric", values_to = "value")
to_res %>%
pivot_longer(cols = -c(result), names_to = "metric", values_to = "value") %>%
relocate(metric) %>% arrange(metric)
to_res  <- to_res %>%
pivot_longer(cols = -c(result), names_to = "metric", values_to = "value") %>%
relocate(metric) %>% arrange(metric) %>% select(value)
final <- cbind(K_res, N_res, G_res, B_res, Bal_res, sd_res, to_res)
final
final %>% group_by(result) %>% colMeans()
final %>% group_by(result) %>% select(result:value) %>% colMeans()
final %>% group_by(result) %>% summarise(across(nclus2:value))
final %>% group_by(result) %>% summarise(across(where(is.numeric), mean, na.rm = TRUE))
cbind("total", final %>% group_by(result) %>% summarise(across(where(is.numeric), mean, na.rm = TRUE)))
# Add totals per column
total_col <- cbind("total", final %>% group_by(result) %>% summarise(across(where(is.numeric), mean, na.rm = TRUE)))
rbind(final, total_col)
colnames(total_col)[1] <- "metric"; colnames(total_col)[ncol(total_col)] <- "Total"
colnames(total_col)[1] <- "metric"; colnames(total_col)[ncol(total_col)] <- "value"
final <- rbind(final, total_col)
final
xtable(final)
print(xtable(final), include.rownames=FALSE)
final
